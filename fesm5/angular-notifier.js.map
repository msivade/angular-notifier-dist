{"version":3,"file":"angular-notifier.js","sources":["ng://angular-notifier/lib/models/notifier-notification.model.ts","ng://angular-notifier/lib/services/notifier-queue.service.ts","ng://angular-notifier/lib/notifier.tokens.ts","ng://angular-notifier/lib/models/notifier-config.model.ts","ng://angular-notifier/lib/services/notifier.service.ts","ng://angular-notifier/lib/services/notifier-timer.service.ts","ng://angular-notifier/lib/animation-presets/fade.animation-preset.ts","ng://angular-notifier/lib/animation-presets/slide.animation-preset.ts","ng://angular-notifier/lib/services/notifier-animation.service.ts","ng://angular-notifier/lib/components/notifier-notification.component.html","ng://angular-notifier/lib/components/notifier-notification.component.ts","ng://angular-notifier/lib/components/notifier-container.component.html","ng://angular-notifier/lib/components/notifier-container.component.ts","ng://angular-notifier/lib/notifier.module.ts","ng://angular-notifier/angular-notifier.ts"],"sourcesContent":["import { NotifierNotificationComponent } from '../components/notifier-notification.component';\nimport { TemplateRef } from '@angular/core';\n\n/**\n * Notification\n *\n * This class describes the structure of a notifiction, including all information it needs to live, and everyone else needs to work with it.\n */\nexport class NotifierNotification {\n\t/**\n\t * Unique notification ID, can be set manually to control the notification from outside later on\n\t */\n\tpublic id: string;\n\n\t/**\n\t * Notification type, will be used for constructing an appropriate class name\n\t */\n\tpublic type: string;\n\n\t/**\n\t * Notification message\n\t */\n\tpublic message: string;\n\n\t/**\n\t * The template to customize\n\t * the appearance of the notification\n\t */\n\tpublic template?: TemplateRef<any> = null;\n\n\t/**\n\t * Component reference of this notification, created and set during creation time\n\t */\n\tpublic component: NotifierNotificationComponent;\n\n\t/**\n\t * Constructor\n\t *\n\t * @param options Notifier options\n\t */\n\tpublic constructor(options: NotifierNotificationOptions) {\n\t\tObject.assign(this, options);\n\n\t\t// If not set manually, we have to create a unique notification ID by ourselves. The ID generation relies on the current browser\n\t\t// datetime in ms, in praticular the moment this notification gets constructed. Concurrency, and thus two IDs being the exact same,\n\t\t// is not possible due to the action queue concept.\n\t\tif (options.id === undefined) {\n\t\t\tthis.id = `ID_${new Date().getTime()}`;\n\t\t}\n\t}\n}\n\n/**\n * Notifiction options\n *\n * This interface describes which information are needed to create a new notification, or in other words, which information the external API\n * call must provide.\n */\nexport interface NotifierNotificationOptions {\n\t/**\n\t * Notification ID, optional\n\t */\n\tid?: string;\n\n\t/**\n\t * Notification type\n\t */\n\ttype: string;\n\n\t/**\n\t * Notificatin message\n\t */\n\tmessage: string;\n\n\t/**\n\t * The template to customize\n\t * the appearance of the notification\n\t */\n\ttemplate?: TemplateRef<any>;\n}\n","import { Injectable } from '@angular/core';\n\nimport { Subject } from 'rxjs';\n\nimport { NotifierAction } from '../models/notifier-action.model';\n\n/**\n * Notifier queue service\n *\n * In general, API calls don't get processed right away. Instead, we have to queue them up in order to prevent simultanious API calls\n * interfering with each other. This, at least in theory, is possible at any time. In particular, animations - which potentially overlap -\n * can cause changes in JS classes as well as affect the DOM. Therefore, the queue service takes all actions, puts them in a queue, and\n * processes them at the right time (which is when the previous action has been processed successfully).\n *\n * Technical sidenote:\n * An action looks pretty similar to the ones within the Flux / Redux pattern.\n */\n@Injectable()\nexport class NotifierQueueService {\n\n\t/**\n\t * Stream of actions, subscribable from outside\n\t */\n\tpublic readonly actionStream: Subject<NotifierAction>;\n\n\t/**\n\t * Queue of actions\n\t */\n\tprivate actionQueue: Array<NotifierAction>;\n\n\t/**\n\t * Flag, true if some action is currently in progress\n\t */\n\tprivate isActionInProgress: boolean;\n\n\t/**\n\t * Constructor\n\t */\n\tpublic constructor() {\n\t\tthis.actionStream = new Subject<NotifierAction>();\n\t\tthis.actionQueue = [];\n\t\tthis.isActionInProgress = false;\n\t}\n\n\t/**\n\t * Push a new action to the queue, and try to run it\n\t *\n\t * @param action Action object\n\t */\n\tpublic push( action: NotifierAction ): void {\n\t\tthis.actionQueue.push( action );\n\t\tthis.tryToRunNextAction();\n\t}\n\n\t/**\n\t * Continue with the next action (called when the current action is finished)\n\t */\n\tpublic continue(): void {\n\t\tthis.isActionInProgress = false;\n\t\tthis.tryToRunNextAction();\n\t}\n\n\t/**\n\t * Try to run the next action in the queue; we skip if there already is some action in progress, or if there is no action left\n\t */\n\tprivate tryToRunNextAction(): void {\n\t\tif ( this.isActionInProgress || this.actionQueue.length === 0 ) {\n\t\t\treturn; // Skip (the queue can now go drink a coffee as it has nothing to do anymore)\n\t\t}\n\t\tthis.isActionInProgress = true;\n\t\tthis.actionStream.next( this.actionQueue.shift() ); // Push next action to the stream, and remove the current action from the queue\n\t}\n\n}\n","import { NotifierConfig, NotifierOptions } from './models/notifier-config.model';\nimport { InjectionToken } from '@angular/core';\n\n// tslint:disable variable-name\n\n/**\n * Injection Token for notifier options\n */\nexport const NotifierOptionsToken: InjectionToken<NotifierOptions>\n\t= new InjectionToken<NotifierOptions>( '[angular-notifier] Notifier Options' );\n\n/**\n * Injection Token for notifier configuration\n */\nexport const NotifierConfigToken: InjectionToken<NotifierConfig>\n\t= new InjectionToken<NotifierConfig>( '[anuglar-notifier] Notifier Config' );\n\n// tslint:enable variable-name\n\n","/**\n * Notifier options\n */\nexport interface NotifierOptions {\n\tanimations?: {\n\t\tenabled?: boolean;\n\t\thide?: {\n\t\t\teasing?: string;\n\t\t\toffset?: number | false;\n\t\t\tpreset?: string;\n\t\t\tspeed?: number;\n\t\t};\n\t\toverlap?: number | false;\n\t\tshift?: {\n\t\t\teasing?: string;\n\t\t\tspeed?: number;\n\t\t};\n\t\tshow?: {\n\t\t\teasing?: string;\n\t\t\tpreset?: string;\n\t\t\tspeed?: number;\n\t\t};\n\t};\n\tbehaviour?: {\n\t\tautoHide?: number | false;\n\t\tonClick?: 'hide' | false;\n\t\tonMouseover?: 'pauseAutoHide' | 'resetAutoHide' | false;\n\t\tshowDismissButton?: boolean;\n\t\tstacking?: number | false;\n\t};\n\tposition?: {\n\t\thorizontal?: {\n\t\t\tdistance?: number;\n\t\t\tposition?: 'left' | 'middle' | 'right';\n\t\t};\n\t\tvertical?: {\n\t\t\tdistance?: number;\n\t\t\tgap?: number;\n\t\t\tposition?: 'top' | 'bottom';\n\t\t};\n\t};\n\ttheme?: string;\n}\n\n/**\n * Notifier configuration\n *\n * The notifier configuration defines what notifications look like, how they behave, and how they get animated. It is a global\n * configuration, which means that it only can be set once (at the beginning), and cannot be changed afterwards. Aligning to the world of\n * Angular, this configuration can be provided in the root app module - alternatively, a meaningful default configuration will be used.\n */\nexport class NotifierConfig implements NotifierOptions {\n\n\t/**\n\t * Customize animations\n\t */\n\tpublic animations: {\n\t\tenabled: boolean;\n\t\thide: {\n\t\t\teasing: string;\n\t\t\toffset: number | false;\n\t\t\tpreset: string;\n\t\t\tspeed: number;\n\t\t};\n\t\toverlap: number | false;\n\t\tshift: {\n\t\t\teasing: string;\n\t\t\tspeed: number;\n\t\t};\n\t\tshow: {\n\t\t\teasing: string;\n\t\t\tpreset: string;\n\t\t\tspeed: number;\n\t\t};\n\t};\n\n\t/**\n\t * Customize behaviour\n\t */\n\tpublic behaviour: {\n\t\tautoHide: number | false;\n\t\tonClick: 'hide' | false;\n\t\tonMouseover: 'pauseAutoHide' | 'resetAutoHide' | false;\n\t\tshowDismissButton: boolean;\n\t\tstacking: number | false;\n\t};\n\n\t/**\n\t * Customize positioning\n\t */\n\tpublic position: {\n\t\thorizontal: {\n\t\t\tdistance: number;\n\t\t\tposition: 'left' | 'middle' | 'right';\n\t\t};\n\t\tvertical: {\n\t\t\tdistance: number;\n\t\t\tgap: number;\n\t\t\tposition: 'top' | 'bottom';\n\t\t};\n\t};\n\n\t/**\n\t * Customize theming\n\t */\n\tpublic theme: string;\n\n\t/**\n\t * Constructor\n\t *\n\t * @param [customOptions={}] Custom notifier options, optional\n\t */\n\tpublic constructor( customOptions: NotifierOptions = {} ) {\n\n\t\t// Set default values\n\t\tthis.animations = {\n\t\t\tenabled: true,\n\t\t\thide: {\n\t\t\t\teasing: 'ease',\n\t\t\t\toffset: 50,\n\t\t\t\tpreset: 'fade',\n\t\t\t\tspeed: 300\n\t\t\t},\n\t\t\toverlap: 150,\n\t\t\tshift: {\n\t\t\t\teasing: 'ease',\n\t\t\t\tspeed: 300\n\t\t\t},\n\t\t\tshow: {\n\t\t\t\teasing: 'ease',\n\t\t\t\tpreset: 'slide',\n\t\t\t\tspeed: 300\n\t\t\t}\n\t\t};\n\t\tthis.behaviour = {\n\t\t\tautoHide: 7000,\n\t\t\tonClick: false,\n\t\t\tonMouseover: 'pauseAutoHide',\n\t\t\tshowDismissButton: true,\n\t\t\tstacking: 4\n\t\t};\n\t\tthis.position = {\n\t\t\thorizontal: {\n\t\t\t\tdistance: 12,\n\t\t\t\tposition: 'left'\n\t\t\t},\n\t\t\tvertical: {\n\t\t\t\tdistance: 12,\n\t\t\t\tgap: 10,\n\t\t\t\tposition: 'bottom'\n\t\t\t}\n\t\t};\n\t\tthis.theme = 'material';\n\n\t\t// The following merges the custom options into the notifier config, respecting the already set default values\n\t\t// This linear, more explicit and code-sizy workflow is preferred here over a recursive one (because we know the object structure)\n\t\t// Technical sidenote: Objects are merged, other types of values simply overwritten / copied\n\t\tif ( customOptions.theme !== undefined ) {\n\t\t\tthis.theme = customOptions.theme;\n\t\t}\n\t\tif ( customOptions.animations !== undefined ) {\n\t\t\tif ( customOptions.animations.enabled !== undefined ) {\n\t\t\t\tthis.animations.enabled = customOptions.animations.enabled;\n\t\t\t}\n\t\t\tif ( customOptions.animations.overlap !== undefined ) {\n\t\t\t\tthis.animations.overlap = customOptions.animations.overlap;\n\t\t\t}\n\t\t\tif ( customOptions.animations.hide !== undefined ) {\n\t\t\t\tObject.assign( this.animations.hide, customOptions.animations.hide );\n\t\t\t}\n\t\t\tif ( customOptions.animations.shift !== undefined ) {\n\t\t\t\tObject.assign( this.animations.shift, customOptions.animations.shift );\n\t\t\t}\n\t\t\tif ( customOptions.animations.show !== undefined ) {\n\t\t\t\tObject.assign( this.animations.show, customOptions.animations.show );\n\t\t\t}\n\t\t}\n\t\tif ( customOptions.behaviour !== undefined ) {\n\t\t\tObject.assign( this.behaviour, customOptions.behaviour );\n\t\t}\n\t\tif ( customOptions.position !== undefined ) {\n\t\t\tif ( customOptions.position.horizontal !== undefined ) {\n\t\t\t\tObject.assign( this.position.horizontal, customOptions.position.horizontal );\n\t\t\t}\n\t\t\tif ( customOptions.position.vertical !== undefined ) {\n\t\t\t\tObject.assign( this.position.vertical, customOptions.position.vertical );\n\t\t\t}\n\t\t}\n\n\t}\n\n}\n","import { Inject, Injectable, forwardRef } from '@angular/core';\n\nimport { NotifierConfig } from '../models/notifier-config.model';\nimport { NotifierNotificationOptions } from '../models/notifier-notification.model';\nimport { NotifierQueueService } from './notifier-queue.service';\nimport { NotifierConfigToken } from '../notifier.tokens';\n\n/**\n * Notifier service\n *\n * This service provides access to the public notifier API. Once injected into a component, directive, pipe, service, or any other building\n * block of an applications, it can be used to show new notifications, and hide existing ones. Internally, it transforms API calls into\n * actions, which then get thrown into the action queue - eventually being processed at the right moment.\n */\n@Injectable()\nexport class NotifierService {\n\n\t/**\n\t * Notifier queue service\n\t */\n\tprivate readonly queueService: NotifierQueueService;\n\n\t/**\n\t * Notifier configuration\n\t */\n\tprivate readonly config: NotifierConfig;\n\n\t/**\n\t * Constructor\n\t *\n\t * @param notifierQueueService Notifier queue service\n\t * @param config               Notifier configuration, optionally injected as a dependency\n\t */\n\tpublic constructor(\n\t\tnotifierQueueService: NotifierQueueService,\n\t\t@Inject(NotifierConfigToken) config: NotifierConfig\n\t) {\n\t\tthis.queueService = notifierQueueService;\n\t\tthis.config = config;\n\t}\n\n\t/**\n\t * Get the notifier configuration\n\t *\n\t * @returns Notifier configuration\n\t */\n\tpublic getConfig(): NotifierConfig {\n\t\treturn this.config;\n\t}\n\n\t/**\n\t * API: Show a new notification\n\t *\n\t * @param notificationOptions Notification options\n\t */\n\tpublic show( notificationOptions: NotifierNotificationOptions ): void {\n\t\tthis.queueService.push( {\n\t\t\tpayload: notificationOptions,\n\t\t\ttype: 'SHOW'\n\t\t} );\n\t}\n\n\t/**\n\t * API: Hide a specific notification, given its ID\n\t *\n\t * @param notificationId ID of the notification to hide\n\t */\n\tpublic hide( notificationId: string ): void {\n\t\tthis.queueService.push( {\n\t\t\tpayload: notificationId,\n\t\t\ttype: 'HIDE'\n\t\t} );\n\t}\n\n\t/**\n\t * API: Hide the newest notification\n\t */\n\tpublic hideNewest(): void {\n\t\tthis.queueService.push( {\n\t\t\ttype: 'HIDE_NEWEST'\n\t\t} );\n\t}\n\n\t/**\n\t * API: Hide the oldest notification\n\t */\n\tpublic hideOldest(): void {\n\t\tthis.queueService.push( {\n\t\t\ttype: 'HIDE_OLDEST'\n\t\t} );\n\t}\n\n\t/**\n\t * API: Hide all notifications at once\n\t */\n\tpublic hideAll(): void {\n\t\tthis.queueService.push( {\n\t\t\ttype: 'HIDE_ALL'\n\t\t} );\n\t}\n\n\t/**\n\t * API: Shortcut for showing a new notification\n\t *\n\t * @param type             Type of the notification\n\t * @param message          Message of the notification\n\t * @param [notificationId] Unique ID for the notification (optional)\n\t */\n\tpublic notify( type: string, message: string, notificationId?: string ): void {\n\t\tlet notificationOptions: NotifierNotificationOptions = {\n\t\t\tmessage,\n\t\t\ttype\n\t\t};\n\t\tif ( notificationId !== undefined ) {\n\t\t\tnotificationOptions.id = notificationId;\n\t\t}\n\t\tthis.show( notificationOptions );\n\t}\n\n}\n","import { Injectable } from '@angular/core';\n\n/**\n * Notifier timer service\n *\n * This service acts as a timer, needed due to the still rather limited setTimeout JavaScript API. The timer service can start and stop a\n * timer. Furthermore, it can also pause the timer at any time, and resume later on. The timer API workd promise-based.\n */\n@Injectable()\nexport class NotifierTimerService {\n\n\t/**\n\t * Timestamp (in ms), created in the moment the timer starts\n\t */\n\tprivate now: number;\n\n\t/**\n\t * Remaining time (in ms)\n\t */\n\tprivate remaining: number;\n\n\t/**\n\t * Timeout ID, used for clearing the timeout later on\n\t */\n\tprivate timerId: number;\n\n\t/**\n\t * Promise resolve function, eventually getting called once the timer finishes\n\t */\n\tprivate finishPromiseResolver: () => void;\n\n\t/**\n\t * Constructor\n\t */\n\tpublic constructor() {\n\t\tthis.now = 0;\n\t\tthis.remaining = 0;\n\t}\n\n\t/**\n\t * Start (or resume) the timer\n\t *\n\t * @param   duration Timer duration, in ms\n\t * @returns          Promise, resolved once the timer finishes\n\t */\n\tpublic start( duration: number ): Promise<undefined> {\n\t\treturn new Promise<undefined>( ( resolve: () => void, reject: () => void ) => {\n\n\t\t\t// For the first run ...\n\t\t\tthis.remaining = duration;\n\n\t\t\t// Setup, then start the timer\n\t\t\tthis.finishPromiseResolver = resolve;\n\t\t\tthis.continue();\n\n\t\t} );\n\t}\n\n\t/**\n\t * Pause the timer\n\t */\n\tpublic pause(): void {\n\t\tclearTimeout( this.timerId );\n\t\tthis.remaining -= new Date().getTime() - this.now;\n\t}\n\n\t/**\n\t * Continue the timer\n\t */\n\tpublic continue(): void {\n\t\tthis.now = new Date().getTime();\n\t\tthis.timerId = window.setTimeout( () => {\n\t\t\tthis.finish();\n\t\t}, this.remaining );\n\t}\n\n\t/**\n\t * Stop the timer\n\t */\n\tpublic stop(): void {\n\t\tclearTimeout( this.timerId );\n\t\tthis.remaining = 0;\n\t}\n\n\t/**\n\t * Finish up the timeout by resolving the timer promise\n\t */\n\tprivate finish(): void {\n\t\tthis.finishPromiseResolver();\n\t}\n\n}\n","import { NotifierAnimationPreset, NotifierAnimationPresetKeyframes } from '../models/notifier-animation.model';\n\n/**\n * Fade animation preset\n */\nexport const fade: NotifierAnimationPreset = {\n\thide: (): NotifierAnimationPresetKeyframes => {\n\t\treturn {\n\t\t\tfrom: {\n\t\t\t\topacity: '1'\n\t\t\t},\n\t\t\tto: {\n\t\t\t\topacity: '0'\n\t\t\t}\n\t\t};\n\t},\n\tshow: (): NotifierAnimationPresetKeyframes => {\n\t\treturn {\n\t\t\tfrom: {\n\t\t\t\topacity: '0'\n\t\t\t},\n\t\t\tto: {\n\t\t\t\topacity: '1'\n\t\t\t}\n\t\t};\n\t}\n};\n","import { NotifierAnimationPreset, NotifierAnimationPresetKeyframes } from '../models/notifier-animation.model';\nimport { NotifierConfig } from '../models/notifier-config.model';\nimport { NotifierNotification } from '../models/notifier-notification.model';\n\n/**\n * Slide animation preset\n */\nexport const slide: NotifierAnimationPreset = {\n\thide: ( notification: NotifierNotification ): NotifierAnimationPresetKeyframes => {\n\n\t\t// Prepare variables\n\t\tconst config: NotifierConfig = notification.component.getConfig();\n\t\tconst shift: number = notification.component.getShift();\n\t\tlet from: {\n\t\t\t[ animatablePropertyName: string ]: string;\n\t\t};\n\t\tlet to: {\n\t\t\t[ animatablePropertyName: string ]: string;\n\t\t};\n\n\t\t// Configure variables, depending on configuration and component\n\t\tif ( config.position.horizontal.position === 'left' ) {\n\t\t\tfrom = {\n\t\t\t\ttransform: `translate3d( 0, ${ shift }px, 0 )`\n\t\t\t};\n\t\t\tto = {\n\t\t\t\ttransform: `translate3d( calc( -100% - ${ config.position.horizontal.distance }px - 10px ), ${ shift }px, 0 )`\n\t\t\t};\n\t\t} else if ( config.position.horizontal.position === 'right' ) {\n\t\t\tfrom = {\n\t\t\t\ttransform: `translate3d( 0, ${ shift }px, 0 )`\n\t\t\t};\n\t\t\tto = {\n\t\t\t\ttransform: `translate3d( calc( 100% + ${ config.position.horizontal.distance }px + 10px ), ${ shift }px, 0 )`\n\t\t\t};\n\t\t} else {\n\t\t\tlet horizontalPosition: string;\n\t\t\tif ( config.position.vertical.position === 'top' ) {\n\t\t\t\thorizontalPosition = `calc( -100% - ${ config.position.horizontal.distance }px - 10px )`;\n\t\t\t} else {\n\t\t\t\thorizontalPosition = `calc( 100% + ${ config.position.horizontal.distance }px + 10px )`;\n\t\t\t}\n\t\t\tfrom = {\n\t\t\t\ttransform: `translate3d( -50%, ${ shift }px, 0 )`\n\t\t\t};\n\t\t\tto = {\n\t\t\t\ttransform: `translate3d( -50%, ${ horizontalPosition }, 0 )`\n\t\t\t};\n\t\t}\n\n\t\t// Done\n\t\treturn {\n\t\t\tfrom,\n\t\t\tto\n\t\t};\n\n\t},\n\tshow: ( notification: NotifierNotification ): NotifierAnimationPresetKeyframes => {\n\n\t\t// Prepare variables\n\t\tconst config: NotifierConfig = notification.component.getConfig();\n\t\tlet from: {\n\t\t\t[ animatablePropertyName: string ]: string;\n\t\t};\n\t\tlet to: {\n\t\t\t[ animatablePropertyName: string ]: string;\n\t\t};\n\n\t\t// Configure variables, depending on configuration and component\n\t\tif ( config.position.horizontal.position === 'left' ) {\n\t\t\tfrom = {\n\t\t\t\ttransform: `translate3d( calc( -100% - ${ config.position.horizontal.distance }px - 10px ), 0, 0 )`\n\t\t\t};\n\t\t\tto = {\n\t\t\t\ttransform: 'translate3d( 0, 0, 0 )'\n\t\t\t};\n\t\t} else if ( config.position.horizontal.position === 'right' ) {\n\t\t\tfrom = {\n\t\t\t\ttransform: `translate3d( calc( 100% + ${ config.position.horizontal.distance }px + 10px ), 0, 0 )`\n\t\t\t};\n\t\t\tto = {\n\t\t\t\ttransform: 'translate3d( 0, 0, 0 )'\n\t\t\t};\n\t\t} else {\n\t\t\tlet horizontalPosition: string;\n\t\t\tif ( config.position.vertical.position === 'top' ) {\n\t\t\t\thorizontalPosition = `calc( -100% - ${ config.position.horizontal.distance }px - 10px )`;\n\t\t\t} else {\n\t\t\t\thorizontalPosition = `calc( 100% + ${ config.position.horizontal.distance }px + 10px )`;\n\t\t\t}\n\t\t\tfrom = {\n\t\t\t\ttransform: `translate3d( -50%, ${ horizontalPosition }, 0 )`\n\t\t\t};\n\t\t\tto = {\n\t\t\t\ttransform: 'translate3d( -50%, 0, 0 )'\n\t\t\t};\n\t\t}\n\n\t\t// Done\n\t\treturn {\n\t\t\tfrom,\n\t\t\tto\n\t\t};\n\n\t}\n};\n","import { Injectable } from '@angular/core';\n\nimport { NotifierAnimationData, NotifierAnimationPreset, NotifierAnimationPresetKeyframes } from '../models/notifier-animation.model';\nimport { NotifierNotification } from '../models/notifier-notification.model';\nimport { fade } from '../animation-presets/fade.animation-preset';\nimport { slide } from '../animation-presets/slide.animation-preset';\n\n/**\n * Notifier animation service\n */\n@Injectable()\nexport class NotifierAnimationService {\n\n\t/**\n\t * List of animation presets (currently static)\n\t */\n\tprivate readonly animationPresets: {\n\t\t[ animationPresetName: string ]: NotifierAnimationPreset\n\t};\n\n\t/**\n\t * Constructor\n\t */\n\tpublic constructor() {\n\t\tthis.animationPresets = {\n\t\t\tfade,\n\t\t\tslide\n\t\t};\n\t}\n\n\t/**\n\t * Get animation data\n\t *\n\t * This method generates all data the Web Animations API needs to animate our notification. The result depends on both the animation\n\t * direction (either in or out) as well as the notifications (and its attributes) itself.\n\t *\n\t * @param   direction    Animation direction, either in or out\n\t * @param   notification Notification the animation data should be generated for\n\t * @returns Animation information\n\t */\n\tpublic getAnimationData( direction: 'show' | 'hide', notification: NotifierNotification ): NotifierAnimationData {\n\n\t\t// Get all necessary animation data\n\t\tlet keyframes: NotifierAnimationPresetKeyframes;\n\t\tlet duration: number;\n\t\tlet easing: string;\n\t\tif ( direction === 'show' ) {\n\t\t\tkeyframes = this.animationPresets[ notification.component.getConfig().animations.show.preset ].show( notification );\n\t\t\tduration = notification.component.getConfig().animations.show.speed;\n\t\t\teasing = notification.component.getConfig().animations.show.easing;\n\t\t} else {\n\t\t\tkeyframes = this.animationPresets[ notification.component.getConfig().animations.hide.preset ].hide( notification );\n\t\t\tduration = notification.component.getConfig().animations.hide.speed;\n\t\t\teasing = notification.component.getConfig().animations.hide.easing;\n\t\t}\n\n\t\t// Build and return animation data\n\t\treturn {\n\t\t\tkeyframes: [\n\t\t\t\tkeyframes.from,\n\t\t\t\tkeyframes.to\n\t\t\t],\n\t\t\toptions: {\n\t\t\t\tduration,\n\t\t\t\teasing,\n\t\t\t\tfill: 'forwards' // Keep the newly painted state after the animation finished\n\t\t\t}\n\t\t};\n\n\t}\n\n}\n","<ng-container *ngIf=\"notification.template; else predefinedNotification\" [ngTemplateOutlet]=\"notification.template\" [ngTemplateOutletContext]=\"{ notification: notification }\">\n</ng-container>\n\n<ng-template #predefinedNotification>\n\t<p class=\"notifier__notification-message\">{{ notification.message }}</p>\n\t<button class=\"notifier__notification-button\" type=\"button\" title=\"dismiss\" *ngIf=\"config.behaviour.showDismissButton\" (click)=\"onClickDismiss()\">\n\t\t<svg class=\"notifier__notification-button-icon\" viewBox=\"0 0 24 24\" width=\"20\" height=\"20\">\n\t\t\t<path d=\"M19 6.41L17.59 5 12 10.59 6.41 5 5 6.41 10.59 12 5 17.59 6.41 19 12 13.41 17.59 19 19 17.59 13.41 12z\" />\n\t\t</svg>\n\t</button>\n</ng-template>\n","import { AfterViewInit, ChangeDetectionStrategy, Component, ElementRef, EventEmitter, Input, Output, Renderer2 } from '@angular/core';\n\nimport { NotifierAnimationData } from '../models/notifier-animation.model';\nimport { NotifierAnimationService } from '../services/notifier-animation.service';\nimport { NotifierConfig } from '../models/notifier-config.model';\nimport { NotifierNotification } from '../models/notifier-notification.model';\nimport { NotifierService } from '../services/notifier.service';\nimport { NotifierTimerService } from '../services/notifier-timer.service';\n\n/**\n * Notifier notification component\n * -------------------------------\n * This component is responsible for actually displaying the notification on screen. In addition, it's able to show and hide this\n * notification, in particular to animate this notification in and out, as well as shift (move) this notification vertically around.\n * Furthermore, the notification component handles all interactions the user has with this notification / component, such as clicks and\n * mouse movements.\n */\n@Component( {\n\tchangeDetection: ChangeDetectionStrategy.OnPush, // (#perfmatters)\n\thost: {\n\t\t'(click)': 'onNotificationClick()',\n\t\t'(mouseout)': 'onNotificationMouseout()',\n\t\t'(mouseover)': 'onNotificationMouseover()',\n\t\tclass: 'notifier__notification'\n\t},\n\tproviders: [\n\t\t// We provide the timer to the component's local injector, so that every notification components gets its own\n\t\t// instance of the timer service, thus running their timers independently from each other\n\t\tNotifierTimerService\n\t],\n\tselector: 'notifier-notification',\n\ttemplateUrl: './notifier-notification.component.html'\n} )\nexport class NotifierNotificationComponent implements AfterViewInit {\n\n\t/**\n\t * Input: Notification object, contains all details necessary to construct the notification\n\t */\n\t@Input()\n\tpublic notification: NotifierNotification;\n\n\t/**\n\t * Output: Ready event, handles the initialization success by emitting a reference to this notification component\n\t */\n\t@Output()\n\tpublic ready: EventEmitter<NotifierNotificationComponent>;\n\n\t/**\n\t * Output: Dismiss event, handles the click on the dismiss button by emitting the notification ID of this notification component\n\t */\n\t@Output()\n\tpublic dismiss: EventEmitter<string>;\n\n\t/**\n\t * Notifier configuration\n\t */\n\tpublic readonly config: NotifierConfig;\n\n\t/**\n\t * Notifier timer service\n\t */\n\tprivate readonly timerService: NotifierTimerService;\n\n\t/**\n\t * Notifier animation service\n\t */\n\tprivate readonly animationService: NotifierAnimationService;\n\n\t/**\n\t * Angular renderer, used to preserve the overall DOM abstraction & independence\n\t */\n\tprivate readonly renderer: Renderer2;\n\n\t/**\n\t * Native element reference, used for manipulating DOM properties\n\t */\n\tprivate readonly element: HTMLElement;\n\n\t/**\n\t * Current notification height, calculated and cached here (#perfmatters)\n\t */\n\tprivate elementHeight: number;\n\n\t/**\n\t * Current notification width, calculated and cached here (#perfmatters)\n\t */\n\tprivate elementWidth: number;\n\n\t/**\n\t * Current notification shift, calculated and cached here (#perfmatters)\n\t */\n\tprivate elementShift: number;\n\n\t/**\n\t * Constructor\n\t *\n\t * @param elementRef               Reference to the component's element\n\t * @param renderer                 Angular renderer\n\t * @param notifierService          Notifier service\n\t * @param notifierTimerService     Notifier timer service\n\t * @param notifierAnimationService Notifier animation service\n\t */\n\tpublic constructor( elementRef: ElementRef, renderer: Renderer2, notifierService: NotifierService,\n\t\tnotifierTimerService: NotifierTimerService, notifierAnimationService: NotifierAnimationService ) {\n\t\tthis.config = notifierService.getConfig();\n\t\tthis.ready = new EventEmitter<NotifierNotificationComponent>();\n\t\tthis.dismiss = new EventEmitter<string>();\n\t\tthis.timerService = notifierTimerService;\n\t\tthis.animationService = notifierAnimationService;\n\t\tthis.renderer = renderer;\n\t\tthis.element = elementRef.nativeElement;\n\t\tthis.elementShift = 0;\n\t}\n\n\t/**\n\t * Component after view init lifecycle hook, setts up the component and then emits the ready event\n\t */\n\tpublic ngAfterViewInit(): void {\n\t\tthis.setup();\n\t\tthis.elementHeight = this.element.offsetHeight;\n\t\tthis.elementWidth = this.element.offsetWidth;\n\t\tthis.ready.emit( this );\n\t}\n\n\t/**\n\t * Get the notifier config\n\t *\n\t * @returns Notifier configuration\n\t */\n\tpublic getConfig(): NotifierConfig {\n\t\treturn this.config;\n\t}\n\n\t/**\n\t * Get notification element height (in px)\n\t *\n\t * @returns Notification element height (in px)\n\t */\n\tpublic getHeight(): number {\n\t\treturn this.elementHeight;\n\t}\n\n\t/**\n\t * Get notification element width (in px)\n\t *\n\t * @returns Notification element height (in px)\n\t */\n\tpublic getWidth(): number {\n\t\treturn this.elementWidth;\n\t}\n\n\t/**\n\t * Get notification shift offset (in px)\n\t *\n\t * @returns Notification element shift offset (in px)\n\t */\n\tpublic getShift(): number {\n\t\treturn this.elementShift;\n\t}\n\n\t/**\n\t * Show (animate in) this notification\n\t *\n\t * @returns Promise, resolved when done\n\t */\n\tpublic show(): Promise<undefined> {\n\t\treturn new Promise<undefined>( ( resolve: () => void, reject: () => void ) => {\n\n\t\t\t// Are animations enabled?\n\t\t\tif ( this.config.animations.enabled && this.config.animations.show.speed > 0 ) {\n\n\t\t\t\t// Get animation data\n\t\t\t\tconst animationData: NotifierAnimationData = this.animationService.getAnimationData( 'show', this.notification );\n\n\t\t\t\t// Set initial styles (styles before animation), prevents quick flicker when animation starts\n\t\t\t\tconst animatedProperties: Array<string> = Object.keys( animationData.keyframes[ 0 ] );\n\t\t\t\tfor ( let i: number = animatedProperties.length - 1; i >= 0; i-- ) {\n\t\t\t\t\tthis.renderer.setStyle( this.element, animatedProperties[ i ],\n\t\t\t\t\t\tanimationData.keyframes[ 0 ][ animatedProperties[ i ] ] );\n\t\t\t\t}\n\n\t\t\t\t// Animate notification in\n\t\t\t\tthis.renderer.setStyle( this.element, 'visibility', 'visible' );\n\t\t\t\tconst animation: Animation = this.element.animate( animationData.keyframes, animationData.options );\n\t\t\t\tanimation.onfinish = () => {\n\t\t\t\t\tthis.startAutoHideTimer();\n\t\t\t\t\tresolve(); // Done\n\t\t\t\t};\n\n\t\t\t} else {\n\n\t\t\t\t// Show notification\n\t\t\t\tthis.renderer.setStyle( this.element, 'visibility', 'visible' );\n\t\t\t\tthis.startAutoHideTimer();\n\t\t\t\tresolve(); // Done\n\n\t\t\t}\n\n\t\t} );\n\n\t}\n\n\t/**\n\t * Hide (animate out) this notification\n\t *\n\t * @returns Promise, resolved when done\n\t */\n\tpublic hide(): Promise<undefined> {\n\t\treturn new Promise<undefined>( ( resolve: () => void, reject: () => void ) => {\n\n\t\t\tthis.stopAutoHideTimer();\n\n\t\t\t// Are animations enabled?\n\t\t\tif ( this.config.animations.enabled && this.config.animations.hide.speed > 0 ) {\n\t\t\t\tconst animationData: NotifierAnimationData = this.animationService.getAnimationData( 'hide', this.notification );\n\t\t\t\tconst animation: Animation = this.element.animate( animationData.keyframes, animationData.options );\n\t\t\t\tanimation.onfinish = () => {\n\t\t\t\t\tresolve(); // Done\n\t\t\t\t};\n\t\t\t} else {\n\t\t\t\tresolve(); // Done\n\t\t\t}\n\n\t\t} );\n\t}\n\n\t/**\n\t * Shift (move) this notification\n\t *\n\t * @param   distance         Distance to shift (in px)\n\t * @param   shiftToMakePlace Flag, defining in which direction to shift\n\t * @returns Promise, resolved when done\n\t */\n\tpublic shift( distance: number, shiftToMakePlace: boolean ): Promise<undefined> {\n\t\treturn new Promise<undefined>( ( resolve: () => void, reject: () => void ) => {\n\n\t\t\t// Calculate new position (position after the shift)\n\t\t\tlet newElementShift: number;\n\t\t\tif ( ( this.config.position.vertical.position === 'top' && shiftToMakePlace )\n\t\t\t\t|| ( this.config.position.vertical.position === 'bottom' && !shiftToMakePlace ) ) {\n\t\t\t\tnewElementShift = this.elementShift + distance + this.config.position.vertical.gap;\n\t\t\t} else {\n\t\t\t\tnewElementShift = this.elementShift - distance - this.config.position.vertical.gap;\n\t\t\t}\n\t\t\tconst horizontalPosition: string = this.config.position.horizontal.position === 'middle' ? '-50%' : '0';\n\n\t\t\t// Are animations enabled?\n\t\t\tif ( this.config.animations.enabled && this.config.animations.shift.speed > 0 ) {\n\t\t\t\tconst animationData: NotifierAnimationData = { // TODO: Extract into animation service\n\t\t\t\t\tkeyframes: [\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\ttransform: `translate3d( ${ horizontalPosition }, ${ this.elementShift }px, 0 )`\n\t\t\t\t\t\t},\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\ttransform: `translate3d( ${ horizontalPosition }, ${ newElementShift }px, 0 )`\n\t\t\t\t\t\t}\n\t\t\t\t\t],\n\t\t\t\t\toptions: {\n\t\t\t\t\t\tduration: this.config.animations.shift.speed,\n\t\t\t\t\t\teasing: this.config.animations.shift.easing,\n\t\t\t\t\t\tfill: 'forwards'\n\t\t\t\t\t}\n\t\t\t\t};\n\t\t\t\tthis.elementShift = newElementShift;\n\t\t\t\tconst animation: Animation = this.element.animate( animationData.keyframes, animationData.options );\n\t\t\t\tanimation.onfinish = () => {\n\t\t\t\t\tresolve(); // Done\n\t\t\t\t};\n\n\t\t\t} else {\n\t\t\t\tthis.renderer.setStyle( this.element, 'transform', `translate3d( ${ horizontalPosition }, ${ newElementShift }px, 0 )` );\n\t\t\t\tthis.elementShift = newElementShift;\n\t\t\t\tresolve(); // Done\n\t\t\t}\n\n\t\t} );\n\n\t}\n\n\t/**\n\t * Handle click on dismiss button\n\t */\n\tpublic onClickDismiss(): void {\n\t\tthis.dismiss.emit( this.notification.id );\n\t}\n\n\t/**\n\t * Handle mouseover over notification area\n\t */\n\tpublic onNotificationMouseover(): void {\n\t\tif ( this.config.behaviour.onMouseover === 'pauseAutoHide' ) {\n\t\t\tthis.pauseAutoHideTimer();\n\t\t} else if ( this.config.behaviour.onMouseover === 'resetAutoHide' ) {\n\t\t\tthis.stopAutoHideTimer();\n\t\t}\n\t}\n\n\t/**\n\t * Handle mouseout from notification area\n\t */\n\tpublic onNotificationMouseout(): void {\n\t\tif ( this.config.behaviour.onMouseover === 'pauseAutoHide' ) {\n\t\t\tthis.continueAutoHideTimer();\n\t\t} else if ( this.config.behaviour.onMouseover === 'resetAutoHide' ) {\n\t\t\tthis.startAutoHideTimer();\n\t\t}\n\t}\n\n\t/**\n\t * Handle click on notification area\n\t */\n\tpublic onNotificationClick(): void {\n\t\tif ( this.config.behaviour.onClick === 'hide' ) {\n\t\t\tthis.onClickDismiss();\n\t\t}\n\t}\n\n\t/**\n\t * Start the auto hide timer (if enabled)\n\t */\n\tprivate startAutoHideTimer(): void {\n\t\tif ( this.config.behaviour.autoHide !== false && this.config.behaviour.autoHide > 0 ) {\n\t\t\tthis.timerService.start( this.config.behaviour.autoHide ).then( () => {\n\t\t\t\tthis.onClickDismiss();\n\t\t\t} );\n\t\t}\n\t}\n\n\t/**\n\t * Pause the auto hide timer (if enabled)\n\t */\n\tprivate pauseAutoHideTimer(): void {\n\t\tif ( this.config.behaviour.autoHide !== false && this.config.behaviour.autoHide > 0 ) {\n\t\t\tthis.timerService.pause();\n\t\t}\n\t}\n\n\t/**\n\t * Continue the auto hide timer (if enabled)\n\t */\n\tprivate continueAutoHideTimer(): void {\n\t\tif ( this.config.behaviour.autoHide !== false && this.config.behaviour.autoHide > 0 ) {\n\t\t\tthis.timerService.continue();\n\t\t}\n\t}\n\n\t/**\n\t * Stop the auto hide timer (if enabled)\n\t */\n\tprivate stopAutoHideTimer(): void {\n\t\tif ( this.config.behaviour.autoHide !== false && this.config.behaviour.autoHide > 0 ) {\n\t\t\tthis.timerService.stop();\n\t\t}\n\t}\n\n\t/**\n\t * Initial notification setup\n\t */\n\tprivate setup(): void {\n\n\t\t// Set start position (initially the exact same for every new notification)\n\t\tif ( this.config.position.horizontal.position === 'left' ) {\n\t\t\tthis.renderer.setStyle( this.element, 'left', `${ this.config.position.horizontal.distance }px` );\n\t\t} else if ( this.config.position.horizontal.position === 'right' ) {\n\t\t\tthis.renderer.setStyle( this.element, 'right', `${ this.config.position.horizontal.distance }px` );\n\t\t} else {\n\t\t\tthis.renderer.setStyle( this.element, 'left', '50%' );\n\t\t\t// Let's get the GPU handle some work as well (#perfmatters)\n\t\t\tthis.renderer.setStyle( this.element, 'transform', 'translate3d( -50%, 0, 0 )' );\n\t\t}\n\t\tif ( this.config.position.vertical.position === 'top' ) {\n\t\t\tthis.renderer.setStyle( this.element, 'top', `${ this.config.position.vertical.distance }px` );\n\t\t} else {\n\t\t\tthis.renderer.setStyle( this.element, 'bottom', `${ this.config.position.vertical.distance }px` );\n\t\t}\n\n\t\t// Add classes (responsible for visual design)\n\t\tthis.renderer.addClass( this.element, `notifier__notification--${ this.notification.type }` );\n\t\tthis.renderer.addClass( this.element, `notifier__notification--${ this.config.theme }` );\n\n\t}\n\n}\n","<ul>\n\t<li class=\"notifier__container-list\" *ngFor=\"let notification of notifications; trackBy: identifyNotification;\">\n\t\t<notifier-notification\n\t\t\t[notification]=\"notification\"\n\t\t\t(ready)=\"onNotificationReady( $event )\"\n\t\t\t(dismiss)=\"onNotificationDismiss( $event )\">\n\t\t</notifier-notification>\n\t</li>\n</ul>\n","import { ChangeDetectionStrategy, ChangeDetectorRef, Component, OnDestroy } from '@angular/core';\n\nimport { Subscription } from 'rxjs';\n\nimport { NotifierAction } from '../models/notifier-action.model';\nimport { NotifierConfig } from '../models/notifier-config.model';\nimport { NotifierNotification } from '../models/notifier-notification.model';\nimport { NotifierQueueService } from '../services/notifier-queue.service';\nimport { NotifierService } from '../services/notifier.service';\nimport { NotifierNotificationComponent } from './notifier-notification.component';\n\n/**\n * Notifier container component\n * ----------------------------\n * This component acts as a wrapper for all notification components; consequently, it is responsible for creating a new notification\n * component and removing an existing notification component. Being more precicely, it also handles side effects of those actions, such as\n * shifting or even completely removing other notifications as well. Overall, this components handles actions coming from the queue service\n * by subscribing to its action stream.\n *\n * Technical sidenote:\n * This component has to be used somewhere in an application to work; it will not inject and create itself automatically, primarily in order\n * to not break the Angular AoT compilation. Moreover, this component (and also the notification components) set their change detection\n * strategy onPush, which means that we handle change detection manually in order to get the best performance. (#perfmatters)\n */\n@Component( {\n\tchangeDetection: ChangeDetectionStrategy.OnPush, // (#perfmatters)\n\thost: {\n\t\tclass: 'notifier__container'\n\t},\n\tselector: 'notifier-container',\n\ttemplateUrl: './notifier-container.component.html'\n} )\nexport class NotifierContainerComponent implements OnDestroy {\n\n\t/**\n\t * List of currently somewhat active notifications\n\t */\n\tpublic notifications: Array<NotifierNotification>;\n\n\t/**\n\t * Change detector\n\t */\n\tprivate readonly changeDetector: ChangeDetectorRef;\n\n\t/**\n\t * Notifier queue service\n\t */\n\tprivate readonly queueService: NotifierQueueService;\n\n\t/**\n\t * Notifier configuration\n\t */\n\tprivate readonly config: NotifierConfig;\n\n\t/**\n\t * Queue service observable subscription (saved for cleanup)\n\t */\n\tprivate queueServiceSubscription: Subscription;\n\n\t/**\n\t * Promise resolve function reference, temporarily used while the notification child component gets created\n\t */\n\tprivate tempPromiseResolver: () => void;\n\n\t/**\n\t * Constructor\n\t *\n\t * @param changeDetector       Change detector, used for manually triggering change detection runs\n\t * @param notifierQueueService Notifier queue service\n\t * @param notifierService      Notifier service\n\t */\n\tpublic constructor( changeDetector: ChangeDetectorRef, notifierQueueService: NotifierQueueService, notifierService: NotifierService ) {\n\t\tthis.changeDetector = changeDetector;\n\t\tthis.queueService = notifierQueueService;\n\t\tthis.config = notifierService.getConfig();\n\t\tthis.notifications = [];\n\n\t\t// Connects this component up to the action queue, then handle incoming actions\n\t\tthis.queueServiceSubscription = this.queueService.actionStream.subscribe( ( action: NotifierAction ) => {\n\t\t\tthis.handleAction( action ).then( () => {\n\t\t\t\tthis.queueService.continue();\n\t\t\t} );\n\t\t} );\n\n\t}\n\n\t/**\n\t * Component destroyment lifecycle hook, cleans up the observable subsciption\n\t */\n\tpublic ngOnDestroy(): void {\n\t\tif ( this.queueServiceSubscription ) {\n\t\t\tthis.queueServiceSubscription.unsubscribe();\n\t\t}\n\t}\n\n\t/**\n\t * Notification identifier, used as the ngFor trackby function\n\t *\n\t * @param   index        Index\n\t * @param   notification Notifier notification\n\t * @returns Notification ID as the unique identnfier\n\t */\n\tpublic identifyNotification( index: number, notification: NotifierNotification ): string {\n\t\treturn notification.id;\n\t}\n\n\t/**\n\t * Event handler, handles clicks on notification dismiss buttons\n\t *\n\t * @param notificationId ID of the notification to dismiss\n\t */\n\tpublic onNotificationDismiss( notificationId: string ): void {\n\t\tthis.queueService.push( {\n\t\t\tpayload: notificationId,\n\t\t\ttype: 'HIDE'\n\t\t} );\n\t}\n\n\t/**\n\t * Event handler, handles notification ready events\n\t *\n\t * @param notificationComponent Notification component reference\n\t */\n\tpublic onNotificationReady( notificationComponent: NotifierNotificationComponent ): void {\n\t\tlet currentNotification: NotifierNotification = this.notifications[ this.notifications.length - 1 ]; // Get the latest notification\n\t\tcurrentNotification.component = notificationComponent; // Save the new omponent reference\n\t\tthis.continueHandleShowAction( currentNotification ); // Continue with handling the show action\n\t}\n\n\t/**\n\t * Handle incoming actions by mapping action types to methods, and then running them\n\t *\n\t * @param   action Action object\n\t * @returns Promise, resolved when done\n\t */\n\tprivate handleAction( action: NotifierAction ): Promise<undefined> {\n\t\tswitch ( action.type ) { // TODO: Maybe a map (actionType -> class method) is a cleaner solution here?\n\t\t\tcase 'SHOW':\n\t\t\t\treturn this.handleShowAction( action );\n\t\t\tcase 'HIDE':\n\t\t\t\treturn this.handleHideAction( action );\n\t\t\tcase 'HIDE_OLDEST':\n\t\t\t\treturn this.handleHideOldestAction( action );\n\t\t\tcase 'HIDE_NEWEST':\n\t\t\t\treturn this.handleHideNewestAction( action );\n\t\t\tcase 'HIDE_ALL':\n\t\t\t\treturn this.handleHideAllAction( action );\n\t\t\tdefault:\n\t\t\t\treturn new Promise<undefined>( ( resolve: () => void, reject: () => void ) => {\n\t\t\t\t\tresolve(); // Ignore unknown action types\n\t\t\t\t} );\n\t\t}\n\t}\n\n\t/**\n\t * Show a new notification\n\t *\n\t * We simply add the notification to the list, and then wait until its properly initialized / created / rendered.\n\t *\n\t * @param   action Action object\n\t * @returns Promise, resolved when done\n\t */\n\tprivate handleShowAction( action: NotifierAction ): Promise<undefined> {\n\t\treturn new Promise<undefined>( ( resolve: () => void, reject: () => void ) => {\n\t\t\tthis.tempPromiseResolver = resolve; // Save the promise resolve function so that it can be called later on by another method\n\t\t\tthis.addNotificationToList( new NotifierNotification( action.payload ) );\n\t\t} );\n\t}\n\n\t/**\n\t * Continue to show a new notification (after the notification components is initialized / created / rendered).\n\t *\n\t * If this is the first (and thus only) notification, we can simply show it. Otherwhise, if stacking is disabled (or a low value), we\n\t * switch out notifications, in particular we hide the existing one, and then show our new one. Yet, if stacking is enabled, we first\n\t * shift all older notifications, and then show our new notification. In addition, if there are too many notification on the screen,\n\t * we hide the oldest one first. Furthermore, if configured, animation overlapping is applied.\n\t *\n\t * @param notification New notification to show\n\t */\n\tprivate continueHandleShowAction( notification: NotifierNotification ): void {\n\n\t\t// First (which means only one) notification in the list?\n\t\tconst numberOfNotifications: number = this.notifications.length;\n\t\tif ( numberOfNotifications === 1 ) {\n\t\t\tnotification.component.show().then( this.tempPromiseResolver ); // Done\n\t\t} else {\n\n\t\t\tconst implicitStackingLimit: number = 2;\n\n\t\t\t// Stacking enabled? (stacking value below 2 means stacking is disabled)\n\t\t\tif ( this.config.behaviour.stacking === false || this.config.behaviour.stacking < implicitStackingLimit ) {\n\t\t\t\tthis.notifications[ 0 ].component.hide().then( () => {\n\t\t\t\t\tthis.removeNotificationFromList( this.notifications[ 0 ] );\n\t\t\t\t\tnotification.component.show().then( this.tempPromiseResolver ); // Done\n\t\t\t\t} );\n\t\t\t} else {\n\n\t\t\t\tconst stepPromises: Array<Promise<undefined>> = [];\n\n\t\t\t\t// Are there now too many notifications?\n\t\t\t\tif ( numberOfNotifications > this.config.behaviour.stacking ) {\n\n\t\t\t\t\tconst oldNotifications: Array<NotifierNotification> = this.notifications.slice( 1, numberOfNotifications - 1 );\n\n\t\t\t\t\t// Are animations enabled?\n\t\t\t\t\tif ( this.config.animations.enabled ) {\n\n\t\t\t\t\t\t// Is animation overlap enabled?\n\t\t\t\t\t\tif ( this.config.animations.overlap !== false && this.config.animations.overlap > 0 ) {\n\t\t\t\t\t\t\tstepPromises.push( this.notifications[ 0 ].component.hide() );\n\t\t\t\t\t\t\tsetTimeout( () => {\n\t\t\t\t\t\t\t\tstepPromises.push( this.shiftNotifications( oldNotifications, notification.component.getHeight(), true ) );\n\t\t\t\t\t\t\t}, this.config.animations.hide.speed - this.config.animations.overlap );\n\t\t\t\t\t\t\tsetTimeout( () => {\n\t\t\t\t\t\t\t\tstepPromises.push( notification.component.show() );\n\t\t\t\t\t\t\t}, this.config.animations.hide.speed + this.config.animations.shift.speed - this.config.animations.overlap );\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\tstepPromises.push( new Promise<undefined>( ( resolve: () => void, reject: () => void ) => {\n\t\t\t\t\t\t\t\tthis.notifications[ 0 ].component.hide().then( () => {\n\t\t\t\t\t\t\t\t\tthis.shiftNotifications( oldNotifications, notification.component.getHeight(), true ).then( () => {\n\t\t\t\t\t\t\t\t\t\tnotification.component.show().then( resolve );\n\t\t\t\t\t\t\t\t\t} );\n\t\t\t\t\t\t\t\t} );\n\t\t\t\t\t\t\t} ) );\n\t\t\t\t\t\t}\n\n\t\t\t\t\t} else {\n\t\t\t\t\t\tstepPromises.push( this.notifications[ 0 ].component.hide() );\n\t\t\t\t\t\tstepPromises.push( this.shiftNotifications( oldNotifications, notification.component.getHeight(), true ) );\n\t\t\t\t\t\tstepPromises.push( notification.component.show() );\n\t\t\t\t\t}\n\n\t\t\t\t} else {\n\n\t\t\t\t\tconst oldNotifications: Array<NotifierNotification> = this.notifications.slice( 0, numberOfNotifications - 1 );\n\n\t\t\t\t\t// Are animations enabled?\n\t\t\t\t\tif ( this.config.animations.enabled ) {\n\n\t\t\t\t\t\t// Is animation overlap enabled?\n\t\t\t\t\t\tif ( this.config.animations.overlap !== false && this.config.animations.overlap > 0 ) {\n\t\t\t\t\t\t\tstepPromises.push( this.shiftNotifications( oldNotifications, notification.component.getHeight(), true ) );\n\t\t\t\t\t\t\tsetTimeout( () => {\n\t\t\t\t\t\t\t\tstepPromises.push( notification.component.show() );\n\t\t\t\t\t\t\t}, this.config.animations.shift.speed - this.config.animations.overlap );\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\tstepPromises.push( new Promise<undefined>( ( resolve: () => void, reject: () => void ) => {\n\t\t\t\t\t\t\t\tthis.shiftNotifications( oldNotifications, notification.component.getHeight(), true ).then( () => {\n\t\t\t\t\t\t\t\t\tnotification.component.show().then( resolve );\n\t\t\t\t\t\t\t\t} );\n\t\t\t\t\t\t\t} ) );\n\t\t\t\t\t\t}\n\n\t\t\t\t\t} else {\n\t\t\t\t\t\tstepPromises.push( this.shiftNotifications( oldNotifications, notification.component.getHeight(), true ) );\n\t\t\t\t\t\tstepPromises.push( notification.component.show() );\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t\tPromise.all( stepPromises ).then( () => {\n\t\t\t\t\tif ( numberOfNotifications > this.config.behaviour.stacking ) {\n\t\t\t\t\t\tthis.removeNotificationFromList( this.notifications[ 0 ] );\n\t\t\t\t\t}\n\t\t\t\t\tthis.tempPromiseResolver();\n\t\t\t\t} ); // Done\n\n\t\t\t}\n\n\t\t}\n\n\t}\n\n\t/**\n\t * Hide an existing notification\n\t *\n\t * Fist, we skip everything if there are no notifications at all, or the given notification does not exist. Then, we hide the given\n\t * notification. If there exist older notifications, we then shift them around to fill the gap. Once both hiding the given notification\n\t * and shifting the older notificaitons is done, the given notification gets finally removed (from the DOM).\n\t *\n\t * @param   action Action object, payload contains the notification ID\n\t * @returns Promise, resolved when done\n\t */\n\tprivate handleHideAction( action: NotifierAction ): Promise<undefined> {\n\t\treturn new Promise<undefined>( ( resolve: () => void, reject: () => void ) => {\n\n\t\t\tconst stepPromises: Array<Promise<undefined>> = [];\n\n\t\t\t// Does the notification exist / are there even any notifications? (let's prevent accidential errors)\n\t\t\tconst notification: NotifierNotification | undefined = this.findNotificationById( action.payload );\n\t\t\tif ( notification === undefined ) {\n\t\t\t\tresolve();\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\t// Get older notifications\n\t\t\tconst notificationIndex: number | undefined = this.findNotificationIndexById( action.payload );\n\t\t\tif ( notificationIndex === undefined ) {\n\t\t\t\tresolve();\n\t\t\t\treturn;\n\t\t\t}\n\t\t\tconst oldNotifications: Array<NotifierNotification> = this.notifications.slice( 0, notificationIndex );\n\n\t\t\t// Do older notifications exist, and thus do we need to shift other notifications as a consequence?\n\t\t\tif ( oldNotifications.length > 0 ) {\n\n\t\t\t\t// Are animations enabled?\n\t\t\t\tif ( this.config.animations.enabled && this.config.animations.hide.speed > 0 ) {\n\n\t\t\t\t\t// Is animation overlap enabled?\n\t\t\t\t\tif ( this.config.animations.overlap !== false && this.config.animations.overlap > 0 ) {\n\t\t\t\t\t\tstepPromises.push( notification.component.hide() );\n\t\t\t\t\t\tsetTimeout( () => {\n\t\t\t\t\t\t\tstepPromises.push( this.shiftNotifications( oldNotifications, notification.component.getHeight(), false ) );\n\t\t\t\t\t\t}, this.config.animations.hide.speed - this.config.animations.overlap );\n\t\t\t\t\t} else {\n\t\t\t\t\t\tnotification.component.hide().then( () => {\n\t\t\t\t\t\t\tstepPromises.push( this.shiftNotifications( oldNotifications, notification.component.getHeight(), false ) );\n\t\t\t\t\t\t} );\n\t\t\t\t\t}\n\t\t\t\t} else {\n\t\t\t\t\tstepPromises.push( notification.component.hide() );\n\t\t\t\t\tstepPromises.push( this.shiftNotifications( oldNotifications, notification.component.getHeight(), false ) );\n\t\t\t\t}\n\n\t\t\t} else {\n\n\t\t\t\tstepPromises.push( notification.component.hide() );\n\n\t\t\t}\n\n\t\t\t// Wait until both hiding and shifting is done, then remove the notification from the list\n\t\t\tPromise.all( stepPromises ).then( () => {\n\t\t\t\tthis.removeNotificationFromList( notification );\n\t\t\t\tresolve(); // Done\n\t\t\t} );\n\n\t\t} );\n\n\t}\n\n\t/**\n\t * Hide the oldest notification (bridge to handleHideAction)\n\t *\n\t * @param   action Action object\n\t * @returns Promise, resolved when done\n\t */\n\tprivate handleHideOldestAction( action: NotifierAction ): Promise<undefined> {\n\n\t\t// Are there any notifications? (prevent accidential errors)\n\t\tif ( this.notifications.length === 0 ) {\n\t\t\treturn new Promise<undefined>( ( resolve: () => void, reject: () => void ) => {\n\t\t\t\tresolve();\n\t\t\t} ); // Done\n\t\t} else {\n\t\t\taction.payload = this.notifications[ 0 ].id;\n\t\t\treturn this.handleHideAction( action );\n\t\t}\n\n\t}\n\n\t/**\n\t * Hide the newest notification (bridge to handleHideAction)\n\t *\n\t * @param   action Action object\n\t * @returns Promise, resolved when done\n\t */\n\tprivate handleHideNewestAction( action: NotifierAction ): Promise<undefined> {\n\n\t\t// Are there any notifications? (prevent accidential errors)\n\t\tif ( this.notifications.length === 0 ) {\n\t\t\treturn new Promise<undefined>( ( resolve: () => void, reject: () => void ) => {\n\t\t\t\tresolve();\n\t\t\t} ); // Done\n\t\t} else {\n\t\t\taction.payload = this.notifications[ this.notifications.length - 1 ].id;\n\t\t\treturn this.handleHideAction( action );\n\t\t}\n\n\t}\n\n\t/**\n\t * Hide all notifications at once\n\t *\n\t * @param   action Action object\n\t * @returns Promise, resolved when done\n\t */\n\tprivate handleHideAllAction( action: NotifierAction ): Promise<undefined> {\n\t\treturn new Promise<undefined>( ( resolve: () => void, reject: () => void ) => {\n\n\t\t\t// Are there any notifications? (prevent accidential errors)\n\t\t\tconst numberOfNotifications: number = this.notifications.length;\n\t\t\tif ( numberOfNotifications === 0 ) {\n\t\t\t\tresolve(); // Done\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\t// Are animations enabled?\n\t\t\tif ( this.config.animations.enabled && this.config.animations.hide.speed > 0 && this.config.animations.hide.offset !== false &&\n\t\t\t\tthis.config.animations.hide.offset > 0 ) {\n\n\t\t\t\tfor ( let i: number = numberOfNotifications - 1; i >= 0; i-- ) {\n\t\t\t\t\tconst animationOffset: number = this.config.position.vertical.position === 'top' ? numberOfNotifications - 1 : i;\n\t\t\t\t\tsetTimeout( () => {\n\t\t\t\t\t\tthis.notifications[ i ].component.hide().then( () => {\n\n\t\t\t\t\t\t\t// Are we done here, was this the last notification to be hidden?\n\t\t\t\t\t\t\tif ( ( this.config.position.vertical.position === 'top' && i === 0 ) ||\n\t\t\t\t\t\t\t\t( this.config.position.vertical.position === 'bottom' && i === numberOfNotifications - 1 ) ) {\n\t\t\t\t\t\t\t\tthis.removeAllNotificationsFromList();\n\t\t\t\t\t\t\t\tresolve(); // Done\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t} );\n\t\t\t\t\t}, this.config.animations.hide.offset * animationOffset );\n\t\t\t\t}\n\n\t\t\t} else {\n\n\t\t\t\tlet stepPromises: Array<Promise<undefined>> = [];\n\t\t\t\tfor ( let i: number = numberOfNotifications - 1; i >= 0; i-- ) {\n\t\t\t\t\tstepPromises.push( this.notifications[ i ].component.hide() );\n\t\t\t\t}\n\t\t\t\tPromise.all( stepPromises ).then( () => {\n\t\t\t\t\tthis.removeAllNotificationsFromList();\n\t\t\t\t\tresolve(); // Done\n\t\t\t\t} );\n\n\t\t\t}\n\n\t\t} );\n\t}\n\n\t/**\n\t * Shift multiple notifications at once\n\t *\n\t * @param   notifications List containing the notifications to be shifted\n\t * @param   distance      Distance to shift (in px)\n\t * @param   toMakePlace   Flag, defining in which direciton to shift\n\t * @returns Promise, resolved when done\n\t */\n\tprivate shiftNotifications( notifications: Array<NotifierNotification>, distance: number, toMakePlace: boolean ): Promise<undefined> {\n\t\treturn new Promise<undefined>( ( resolve: () => void, reject: () => void ) => {\n\n\t\t\t// Are there any notifications to shift?\n\t\t\tif ( notifications.length === 0 ) {\n\t\t\t\tresolve();\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tlet notificationPromises: Array<Promise<undefined>> = [];\n\t\t\tfor ( let i: number = notifications.length - 1; i >= 0; i-- ) {\n\t\t\t\tnotificationPromises.push( notifications[ i ].component.shift( distance, toMakePlace ) );\n\t\t\t}\n\t\t\tPromise.all( notificationPromises ).then( resolve ); // Done\n\n\t\t} );\n\t}\n\n\t/**\n\t * Add a new notification to the list of notifications (triggers change detection)\n\t *\n\t * @param notification Notification to add to the list of notifications\n\t */\n\tprivate addNotificationToList( notification: NotifierNotification ): void {\n\t\tthis.notifications.push( notification );\n\t\tthis.changeDetector.markForCheck(); // Run change detection because the notification list changed\n\t}\n\n\t/**\n\t * Remove an existing notification from the list of notifications (triggers change detection)\n\t *\n\t * @param notification Notification to be removed from the list of notifications\n\t */\n\tprivate removeNotificationFromList( notification: NotifierNotification ): void {\n\t\tthis.notifications =\n\t\t\tthis.notifications.filter( ( item: NotifierNotification ) => item.component !== notification.component );\n\t\tthis.changeDetector.markForCheck(); // Run change detection because the notification list changed\n\t}\n\n\t/**\n\t * Remove all notifications from the list (triggers change detection)\n\t */\n\tprivate removeAllNotificationsFromList(): void {\n\t\tthis.notifications = [];\n\t\tthis.changeDetector.markForCheck(); // Run change detection because the notification list changed\n\t}\n\n\t/**\n\t * Helper: Find a notification in the notification list by a given notification ID\n\t *\n\t * @param   notificationId Notification ID, used for finding notification\n\t * @returns Notification, undefined if not found\n\t */\n\tprivate findNotificationById( notificationId: string ): NotifierNotification | undefined {\n\t\treturn this.notifications.find( ( currentNotification: NotifierNotification ) => currentNotification.id === notificationId );\n\t}\n\n\t/**\n\t * Helper: Find a notification's index by a given notification ID\n\t *\n\t * @param   notificationId Notification ID, used for finding a notification's index\n\t * @returns Notification index, undefined if not found\n\t */\n\tprivate findNotificationIndexById( notificationId: string ): number | undefined {\n\t\tconst notificationIndex: number =\n\t\t\tthis.notifications.findIndex( ( currentNotification: NotifierNotification ) => currentNotification.id === notificationId );\n\t\treturn ( notificationIndex !== -1 ? notificationIndex : undefined );\n\t}\n\n}\n","import { CommonModule } from '@angular/common';\nimport { InjectionToken, ModuleWithProviders, NgModule } from '@angular/core';\n\nimport { NotifierContainerComponent } from './components/notifier-container.component';\nimport { NotifierNotificationComponent } from './components/notifier-notification.component';\nimport { NotifierConfig, NotifierOptions } from './models/notifier-config.model';\nimport { NotifierAnimationService } from './services/notifier-animation.service';\nimport { NotifierQueueService } from './services/notifier-queue.service';\nimport { NotifierService } from './services/notifier.service';\nimport { NotifierConfigToken, NotifierOptionsToken } from './notifier.tokens';\n\n/**\n * Factory for a notifier configuration with custom options\n *\n * Sidenote:\n * Required as Angular AoT compilation cannot handle dynamic functions; see <https://github.com/angular/angular/issues/11262>.\n *\n * @param   options - Custom notifier options\n * @returns - Notifier configuration as result\n */\nexport function notifierCustomConfigFactory( options: NotifierOptions ): NotifierConfig {\n\treturn new NotifierConfig( options );\n}\n\n/**\n * Factory for a notifier configuration with default options\n *\n * Sidenote:\n * Required as Angular AoT compilation cannot handle dynamic functions; see <https://github.com/angular/angular/issues/11262>.\n *\n * @returns - Notifier configuration as result\n */\nexport function notifierDefaultConfigFactory(): NotifierConfig {\n\treturn new NotifierConfig( {} );\n}\n\n/**\n * Notifier module\n */\n@NgModule( {\n\tdeclarations: [\n\t\tNotifierContainerComponent,\n\t\tNotifierNotificationComponent\n\t],\n\texports: [\n\t\tNotifierContainerComponent\n\t],\n\timports: [\n\t\tCommonModule\n\t],\n\tproviders: [\n\t\tNotifierAnimationService,\n\t\tNotifierService,\n\t\tNotifierQueueService,\n\n\t\t// Provide the default notifier configuration if just the module is imported\n\t\t{\n\t\t\tprovide: NotifierConfigToken,\n\t\t\tuseFactory: notifierDefaultConfigFactory\n\t\t}\n\n\t]\n} )\nexport class NotifierModule {\n\n\t/**\n\t * Setup the notifier module with custom providers, in this case with a custom configuration based on the givne options\n\t *\n\t * @param   [options={}] - Custom notifier options\n\t * @returns - Notifier module with custom providers\n\t */\n\tpublic static withConfig( options: NotifierOptions = {} ): ModuleWithProviders {\n\t\treturn {\n\t\t\tngModule: NotifierModule,\n\t\t\tproviders: [\n\n\t\t\t\t// Provide the options itself upfront (as we need to inject them as dependencies -- see below)\n\t\t\t\t{\n\t\t\t\t\tprovide: NotifierOptionsToken,\n\t\t\t\t\tuseValue: options\n\t\t\t\t},\n\n\t\t\t\t// Provide a custom notifier configuration, based on the given notifier options\n\t\t\t\t{\n\t\t\t\t\tdeps: [\n\t\t\t\t\t\tNotifierOptionsToken\n\t\t\t\t\t],\n\t\t\t\t\tprovide: NotifierConfigToken,\n\t\t\t\t\tuseFactory: notifierCustomConfigFactory\n\t\t\t\t}\n\n\t\t\t]\n\t\t};\n\t}\n\n}\n","/**\n * Generated bundle index. Do not edit.\n */\n\nexport * from './index';\n"],"names":["i0.ɵɵelementContainer","i0.ɵɵproperty","i0.ɵɵelementStart","i0.ɵɵlistener","i0.ɵɵnamespaceSVG","i0.ɵɵelement","i0.ɵɵelementEnd","i0.ɵɵtext","i0.ɵɵtemplate","i0.ɵɵadvance","i0.ɵɵtextInterpolate"],"mappings":";;;;AAGA;;;;;AAKA;;;;;;IAgCC,8BAAmB,OAAoC;;;;;QAZhD,aAAQ,GAAsB,IAAI,CAAC;QAazC,MAAM,CAAC,MAAM,CAAC,IAAI,EAAE,OAAO,CAAC,CAAC;;;;QAK7B,IAAI,OAAO,CAAC,EAAE,KAAK,SAAS,EAAE;YAC7B,IAAI,CAAC,EAAE,GAAG,QAAM,IAAI,IAAI,EAAE,CAAC,OAAO,EAAI,CAAC;SACvC;KACD;IACF,2BAAC;AAAD,CAAC;;AC5CD;;;;;;;;;;;AAWA;;;;IAqBC;QACC,IAAI,CAAC,YAAY,GAAG,IAAI,OAAO,EAAkB,CAAC;QAClD,IAAI,CAAC,WAAW,GAAG,EAAE,CAAC;QACtB,IAAI,CAAC,kBAAkB,GAAG,KAAK,CAAC;KAChC;;;;;;IAOM,mCAAI,GAAX,UAAa,MAAsB;QAClC,IAAI,CAAC,WAAW,CAAC,IAAI,CAAE,MAAM,CAAE,CAAC;QAChC,IAAI,CAAC,kBAAkB,EAAE,CAAC;KAC1B;;;;IAKM,uCAAQ,GAAf;QACC,IAAI,CAAC,kBAAkB,GAAG,KAAK,CAAC;QAChC,IAAI,CAAC,kBAAkB,EAAE,CAAC;KAC1B;;;;IAKO,iDAAkB,GAA1B;QACC,IAAK,IAAI,CAAC,kBAAkB,IAAI,IAAI,CAAC,WAAW,CAAC,MAAM,KAAK,CAAC,EAAG;YAC/D,OAAO;SACP;QACD,IAAI,CAAC,kBAAkB,GAAG,IAAI,CAAC;QAC/B,IAAI,CAAC,YAAY,CAAC,IAAI,CAAE,IAAI,CAAC,WAAW,CAAC,KAAK,EAAE,CAAE,CAAC;KACnD;+GArDW,oBAAoB;gFAApB,oBAAoB,WAApB,oBAAoB;+BAlBjC;CAiBA,IAwDC;+CAvDY,oBAAoB;cADhC,UAAU;;;ACdX;AAEA;;;IAGa,oBAAoB,GAC9B,IAAI,cAAc,CAAmB,qCAAqC,EAAG;AAEhF;;;IAGa,mBAAmB,GAC7B,IAAI,cAAc,CAAkB,oCAAoC,EAAG;AAE9E;;AC2BA;;;;;;;;;;;;;IAoEC,wBAAoB,aAAmC;QAAnC,8BAAA,EAAA,kBAAmC;;QAGtD,IAAI,CAAC,UAAU,GAAG;YACjB,OAAO,EAAE,IAAI;YACb,IAAI,EAAE;gBACL,MAAM,EAAE,MAAM;gBACd,MAAM,EAAE,EAAE;gBACV,MAAM,EAAE,MAAM;gBACd,KAAK,EAAE,GAAG;aACV;YACD,OAAO,EAAE,GAAG;YACZ,KAAK,EAAE;gBACN,MAAM,EAAE,MAAM;gBACd,KAAK,EAAE,GAAG;aACV;YACD,IAAI,EAAE;gBACL,MAAM,EAAE,MAAM;gBACd,MAAM,EAAE,OAAO;gBACf,KAAK,EAAE,GAAG;aACV;SACD,CAAC;QACF,IAAI,CAAC,SAAS,GAAG;YAChB,QAAQ,EAAE,IAAI;YACd,OAAO,EAAE,KAAK;YACd,WAAW,EAAE,eAAe;YAC5B,iBAAiB,EAAE,IAAI;YACvB,QAAQ,EAAE,CAAC;SACX,CAAC;QACF,IAAI,CAAC,QAAQ,GAAG;YACf,UAAU,EAAE;gBACX,QAAQ,EAAE,EAAE;gBACZ,QAAQ,EAAE,MAAM;aAChB;YACD,QAAQ,EAAE;gBACT,QAAQ,EAAE,EAAE;gBACZ,GAAG,EAAE,EAAE;gBACP,QAAQ,EAAE,QAAQ;aAClB;SACD,CAAC;QACF,IAAI,CAAC,KAAK,GAAG,UAAU,CAAC;;;;QAKxB,IAAK,aAAa,CAAC,KAAK,KAAK,SAAS,EAAG;YACxC,IAAI,CAAC,KAAK,GAAG,aAAa,CAAC,KAAK,CAAC;SACjC;QACD,IAAK,aAAa,CAAC,UAAU,KAAK,SAAS,EAAG;YAC7C,IAAK,aAAa,CAAC,UAAU,CAAC,OAAO,KAAK,SAAS,EAAG;gBACrD,IAAI,CAAC,UAAU,CAAC,OAAO,GAAG,aAAa,CAAC,UAAU,CAAC,OAAO,CAAC;aAC3D;YACD,IAAK,aAAa,CAAC,UAAU,CAAC,OAAO,KAAK,SAAS,EAAG;gBACrD,IAAI,CAAC,UAAU,CAAC,OAAO,GAAG,aAAa,CAAC,UAAU,CAAC,OAAO,CAAC;aAC3D;YACD,IAAK,aAAa,CAAC,UAAU,CAAC,IAAI,KAAK,SAAS,EAAG;gBAClD,MAAM,CAAC,MAAM,CAAE,IAAI,CAAC,UAAU,CAAC,IAAI,EAAE,aAAa,CAAC,UAAU,CAAC,IAAI,CAAE,CAAC;aACrE;YACD,IAAK,aAAa,CAAC,UAAU,CAAC,KAAK,KAAK,SAAS,EAAG;gBACnD,MAAM,CAAC,MAAM,CAAE,IAAI,CAAC,UAAU,CAAC,KAAK,EAAE,aAAa,CAAC,UAAU,CAAC,KAAK,CAAE,CAAC;aACvE;YACD,IAAK,aAAa,CAAC,UAAU,CAAC,IAAI,KAAK,SAAS,EAAG;gBAClD,MAAM,CAAC,MAAM,CAAE,IAAI,CAAC,UAAU,CAAC,IAAI,EAAE,aAAa,CAAC,UAAU,CAAC,IAAI,CAAE,CAAC;aACrE;SACD;QACD,IAAK,aAAa,CAAC,SAAS,KAAK,SAAS,EAAG;YAC5C,MAAM,CAAC,MAAM,CAAE,IAAI,CAAC,SAAS,EAAE,aAAa,CAAC,SAAS,CAAE,CAAC;SACzD;QACD,IAAK,aAAa,CAAC,QAAQ,KAAK,SAAS,EAAG;YAC3C,IAAK,aAAa,CAAC,QAAQ,CAAC,UAAU,KAAK,SAAS,EAAG;gBACtD,MAAM,CAAC,MAAM,CAAE,IAAI,CAAC,QAAQ,CAAC,UAAU,EAAE,aAAa,CAAC,QAAQ,CAAC,UAAU,CAAE,CAAC;aAC7E;YACD,IAAK,aAAa,CAAC,QAAQ,CAAC,QAAQ,KAAK,SAAS,EAAG;gBACpD,MAAM,CAAC,MAAM,CAAE,IAAI,CAAC,QAAQ,CAAC,QAAQ,EAAE,aAAa,CAAC,QAAQ,CAAC,QAAQ,CAAE,CAAC;aACzE;SACD;KAED;IAEF,qBAAC;AAAD,CAAC;;ACxLD;;;;;;;;;;;;;;IA0BC,yBACC,oBAA0C,EACb,MAAsB;QAEnD,IAAI,CAAC,YAAY,GAAG,oBAAoB,CAAC;QACzC,IAAI,CAAC,MAAM,GAAG,MAAM,CAAC;KACrB;;;;;;IAOM,mCAAS,GAAhB;QACC,OAAO,IAAI,CAAC,MAAM,CAAC;KACnB;;;;;;IAOM,8BAAI,GAAX,UAAa,mBAAgD;QAC5D,IAAI,CAAC,YAAY,CAAC,IAAI,CAAE;YACvB,OAAO,EAAE,mBAAmB;YAC5B,IAAI,EAAE,MAAM;SACZ,CAAE,CAAC;KACJ;;;;;;IAOM,8BAAI,GAAX,UAAa,cAAsB;QAClC,IAAI,CAAC,YAAY,CAAC,IAAI,CAAE;YACvB,OAAO,EAAE,cAAc;YACvB,IAAI,EAAE,MAAM;SACZ,CAAE,CAAC;KACJ;;;;IAKM,oCAAU,GAAjB;QACC,IAAI,CAAC,YAAY,CAAC,IAAI,CAAE;YACvB,IAAI,EAAE,aAAa;SACnB,CAAE,CAAC;KACJ;;;;IAKM,oCAAU,GAAjB;QACC,IAAI,CAAC,YAAY,CAAC,IAAI,CAAE;YACvB,IAAI,EAAE,aAAa;SACnB,CAAE,CAAC;KACJ;;;;IAKM,iCAAO,GAAd;QACC,IAAI,CAAC,YAAY,CAAC,IAAI,CAAE;YACvB,IAAI,EAAE,UAAU;SAChB,CAAE,CAAC;KACJ;;;;;;;;IASM,gCAAM,GAAb,UAAe,IAAY,EAAE,OAAe,EAAE,cAAuB;QACpE,IAAI,mBAAmB,GAAgC;YACtD,OAAO,SAAA;YACP,IAAI,MAAA;SACJ,CAAC;QACF,IAAK,cAAc,KAAK,SAAS,EAAG;YACnC,mBAAmB,CAAC,EAAE,GAAG,cAAc,CAAC;SACxC;QACD,IAAI,CAAC,IAAI,CAAE,mBAAmB,CAAE,CAAC;KACjC;qGAtGW,eAAe,2CAoBlB,mBAAmB;2EApBhB,eAAe,WAAf,eAAe;0BAf5B;CAcA,IAyGC;+CAxGY,eAAe;cAD3B,UAAU;;sBAqBR,MAAM;uBAAC,mBAAmB;;;ACjC7B;;;;;;AAMA;;;;IA0BC;QACC,IAAI,CAAC,GAAG,GAAG,CAAC,CAAC;QACb,IAAI,CAAC,SAAS,GAAG,CAAC,CAAC;KACnB;;;;;;;IAQM,oCAAK,GAAZ,UAAc,QAAgB;QAA9B,iBAWC;QAVA,OAAO,IAAI,OAAO,CAAa,UAAE,OAAmB,EAAE,MAAkB;;YAGvE,KAAI,CAAC,SAAS,GAAG,QAAQ,CAAC;;YAG1B,KAAI,CAAC,qBAAqB,GAAG,OAAO,CAAC;YACrC,KAAI,CAAC,QAAQ,EAAE,CAAC;SAEhB,CAAE,CAAC;KACJ;;;;IAKM,oCAAK,GAAZ;QACC,YAAY,CAAE,IAAI,CAAC,OAAO,CAAE,CAAC;QAC7B,IAAI,CAAC,SAAS,IAAI,IAAI,IAAI,EAAE,CAAC,OAAO,EAAE,GAAG,IAAI,CAAC,GAAG,CAAC;KAClD;;;;IAKM,uCAAQ,GAAf;QAAA,iBAKC;QAJA,IAAI,CAAC,GAAG,GAAG,IAAI,IAAI,EAAE,CAAC,OAAO,EAAE,CAAC;QAChC,IAAI,CAAC,OAAO,GAAG,MAAM,CAAC,UAAU,CAAE;YACjC,KAAI,CAAC,MAAM,EAAE,CAAC;SACd,EAAE,IAAI,CAAC,SAAS,CAAE,CAAC;KACpB;;;;IAKM,mCAAI,GAAX;QACC,YAAY,CAAE,IAAI,CAAC,OAAO,CAAE,CAAC;QAC7B,IAAI,CAAC,SAAS,GAAG,CAAC,CAAC;KACnB;;;;IAKO,qCAAM,GAAd;QACC,IAAI,CAAC,qBAAqB,EAAE,CAAC;KAC7B;+GAhFW,oBAAoB;gFAApB,oBAAoB,WAApB,oBAAoB;+BATjC;CAQA,IAmFC;+CAlFY,oBAAoB;cADhC,UAAU;;;ACNX;;;AAGO,IAAM,IAAI,GAA4B;IAC5C,IAAI,EAAE;QACL,OAAO;YACN,IAAI,EAAE;gBACL,OAAO,EAAE,GAAG;aACZ;YACD,EAAE,EAAE;gBACH,OAAO,EAAE,GAAG;aACZ;SACD,CAAC;KACF;IACD,IAAI,EAAE;QACL,OAAO;YACN,IAAI,EAAE;gBACL,OAAO,EAAE,GAAG;aACZ;YACD,EAAE,EAAE;gBACH,OAAO,EAAE,GAAG;aACZ;SACD,CAAC;KACF;CACD;;ACtBD;;;AAGO,IAAM,KAAK,GAA4B;IAC7C,IAAI,EAAE,UAAE,YAAkC;;QAGzC,IAAM,MAAM,GAAmB,YAAY,CAAC,SAAS,CAAC,SAAS,EAAE,CAAC;QAClE,IAAM,KAAK,GAAW,YAAY,CAAC,SAAS,CAAC,QAAQ,EAAE,CAAC;QACxD,IAAI,IAEH,CAAC;QACF,IAAI,EAEH,CAAC;;QAGF,IAAK,MAAM,CAAC,QAAQ,CAAC,UAAU,CAAC,QAAQ,KAAK,MAAM,EAAG;YACrD,IAAI,GAAG;gBACN,SAAS,EAAE,qBAAoB,KAAK,YAAU;aAC9C,CAAC;YACF,EAAE,GAAG;gBACJ,SAAS,EAAE,gCAA+B,MAAM,CAAC,QAAQ,CAAC,UAAU,CAAC,QAAQ,qBAAkB,KAAK,YAAU;aAC9G,CAAC;SACF;aAAM,IAAK,MAAM,CAAC,QAAQ,CAAC,UAAU,CAAC,QAAQ,KAAK,OAAO,EAAG;YAC7D,IAAI,GAAG;gBACN,SAAS,EAAE,qBAAoB,KAAK,YAAU;aAC9C,CAAC;YACF,EAAE,GAAG;gBACJ,SAAS,EAAE,+BAA8B,MAAM,CAAC,QAAQ,CAAC,UAAU,CAAC,QAAQ,qBAAkB,KAAK,YAAU;aAC7G,CAAC;SACF;aAAM;YACN,IAAI,kBAAkB,SAAQ,CAAC;YAC/B,IAAK,MAAM,CAAC,QAAQ,CAAC,QAAQ,CAAC,QAAQ,KAAK,KAAK,EAAG;gBAClD,kBAAkB,GAAG,mBAAkB,MAAM,CAAC,QAAQ,CAAC,UAAU,CAAC,QAAQ,gBAAc,CAAC;aACzF;iBAAM;gBACN,kBAAkB,GAAG,kBAAiB,MAAM,CAAC,QAAQ,CAAC,UAAU,CAAC,QAAQ,gBAAc,CAAC;aACxF;YACD,IAAI,GAAG;gBACN,SAAS,EAAE,wBAAuB,KAAK,YAAU;aACjD,CAAC;YACF,EAAE,GAAG;gBACJ,SAAS,EAAE,wBAAuB,kBAAkB,UAAQ;aAC5D,CAAC;SACF;;QAGD,OAAO;YACN,IAAI,MAAA;YACJ,EAAE,IAAA;SACF,CAAC;KAEF;IACD,IAAI,EAAE,UAAE,YAAkC;;QAGzC,IAAM,MAAM,GAAmB,YAAY,CAAC,SAAS,CAAC,SAAS,EAAE,CAAC;QAClE,IAAI,IAEH,CAAC;QACF,IAAI,EAEH,CAAC;;QAGF,IAAK,MAAM,CAAC,QAAQ,CAAC,UAAU,CAAC,QAAQ,KAAK,MAAM,EAAG;YACrD,IAAI,GAAG;gBACN,SAAS,EAAE,gCAA+B,MAAM,CAAC,QAAQ,CAAC,UAAU,CAAC,QAAQ,wBAAsB;aACnG,CAAC;YACF,EAAE,GAAG;gBACJ,SAAS,EAAE,wBAAwB;aACnC,CAAC;SACF;aAAM,IAAK,MAAM,CAAC,QAAQ,CAAC,UAAU,CAAC,QAAQ,KAAK,OAAO,EAAG;YAC7D,IAAI,GAAG;gBACN,SAAS,EAAE,+BAA8B,MAAM,CAAC,QAAQ,CAAC,UAAU,CAAC,QAAQ,wBAAsB;aAClG,CAAC;YACF,EAAE,GAAG;gBACJ,SAAS,EAAE,wBAAwB;aACnC,CAAC;SACF;aAAM;YACN,IAAI,kBAAkB,SAAQ,CAAC;YAC/B,IAAK,MAAM,CAAC,QAAQ,CAAC,QAAQ,CAAC,QAAQ,KAAK,KAAK,EAAG;gBAClD,kBAAkB,GAAG,mBAAkB,MAAM,CAAC,QAAQ,CAAC,UAAU,CAAC,QAAQ,gBAAc,CAAC;aACzF;iBAAM;gBACN,kBAAkB,GAAG,kBAAiB,MAAM,CAAC,QAAQ,CAAC,UAAU,CAAC,QAAQ,gBAAc,CAAC;aACxF;YACD,IAAI,GAAG;gBACN,SAAS,EAAE,wBAAuB,kBAAkB,UAAQ;aAC5D,CAAC;YACF,EAAE,GAAG;gBACJ,SAAS,EAAE,2BAA2B;aACtC,CAAC;SACF;;QAGD,OAAO;YACN,IAAI,MAAA;YACJ,EAAE,IAAA;SACF,CAAC;KAEF;CACD;;AClGD;;;AAGA;;;;IAaC;QACC,IAAI,CAAC,gBAAgB,GAAG;YACvB,IAAI,MAAA;YACJ,KAAK,OAAA;SACL,CAAC;KACF;;;;;;;;;;;IAYM,mDAAgB,GAAvB,UAAyB,SAA0B,EAAE,YAAkC;;QAGtF,IAAI,SAA2C,CAAC;QAChD,IAAI,QAAgB,CAAC;QACrB,IAAI,MAAc,CAAC;QACnB,IAAK,SAAS,KAAK,MAAM,EAAG;YAC3B,SAAS,GAAG,IAAI,CAAC,gBAAgB,CAAE,YAAY,CAAC,SAAS,CAAC,SAAS,EAAE,CAAC,UAAU,CAAC,IAAI,CAAC,MAAM,CAAE,CAAC,IAAI,CAAE,YAAY,CAAE,CAAC;YACpH,QAAQ,GAAG,YAAY,CAAC,SAAS,CAAC,SAAS,EAAE,CAAC,UAAU,CAAC,IAAI,CAAC,KAAK,CAAC;YACpE,MAAM,GAAG,YAAY,CAAC,SAAS,CAAC,SAAS,EAAE,CAAC,UAAU,CAAC,IAAI,CAAC,MAAM,CAAC;SACnE;aAAM;YACN,SAAS,GAAG,IAAI,CAAC,gBAAgB,CAAE,YAAY,CAAC,SAAS,CAAC,SAAS,EAAE,CAAC,UAAU,CAAC,IAAI,CAAC,MAAM,CAAE,CAAC,IAAI,CAAE,YAAY,CAAE,CAAC;YACpH,QAAQ,GAAG,YAAY,CAAC,SAAS,CAAC,SAAS,EAAE,CAAC,UAAU,CAAC,IAAI,CAAC,KAAK,CAAC;YACpE,MAAM,GAAG,YAAY,CAAC,SAAS,CAAC,SAAS,EAAE,CAAC,UAAU,CAAC,IAAI,CAAC,MAAM,CAAC;SACnE;;QAGD,OAAO;YACN,SAAS,EAAE;gBACV,SAAS,CAAC,IAAI;gBACd,SAAS,CAAC,EAAE;aACZ;YACD,OAAO,EAAE;gBACR,QAAQ,UAAA;gBACR,MAAM,QAAA;gBACN,IAAI,EAAE,UAAU;aAChB;SACD,CAAC;KAEF;uHA1DW,wBAAwB;oFAAxB,wBAAwB,WAAxB,wBAAwB;mCAXrC;CAUA,IA6DC;+CA5DY,wBAAwB;cADpC,UAAU;;;;;ICVXA,wBACe;;;IAD0DC,4DAA0C,yEAAA;;;;IAKlHC,8BACC;IADsHC,4MAA0B;IAChJC,gBACC;IADDF,2BACC;IAAAG,uBACD;IAAAC,cAAM;IACPA,cAAS;;;IALTJ,yBAA0C;IAAAK,SAA0B;IAAAD,cAAI;IACxEE,+FACC;;;IAFyCC,YAA0B;IAA1BC,8CAA0B;IACQD,YAA0C;IAA1CR,6DAA0C;;ACIvH;;;;;;;;;;;;;;;;;;IA6FC,uCAAoB,UAAsB,EAAE,QAAmB,EAAE,eAAgC,EAChG,oBAA0C,EAAE,wBAAkD;QAC9F,IAAI,CAAC,MAAM,GAAG,eAAe,CAAC,SAAS,EAAE,CAAC;QAC1C,IAAI,CAAC,KAAK,GAAG,IAAI,YAAY,EAAiC,CAAC;QAC/D,IAAI,CAAC,OAAO,GAAG,IAAI,YAAY,EAAU,CAAC;QAC1C,IAAI,CAAC,YAAY,GAAG,oBAAoB,CAAC;QACzC,IAAI,CAAC,gBAAgB,GAAG,wBAAwB,CAAC;QACjD,IAAI,CAAC,QAAQ,GAAG,QAAQ,CAAC;QACzB,IAAI,CAAC,OAAO,GAAG,UAAU,CAAC,aAAa,CAAC;QACxC,IAAI,CAAC,YAAY,GAAG,CAAC,CAAC;KACtB;;;;IAKM,uDAAe,GAAtB;QACC,IAAI,CAAC,KAAK,EAAE,CAAC;QACb,IAAI,CAAC,aAAa,GAAG,IAAI,CAAC,OAAO,CAAC,YAAY,CAAC;QAC/C,IAAI,CAAC,YAAY,GAAG,IAAI,CAAC,OAAO,CAAC,WAAW,CAAC;QAC7C,IAAI,CAAC,KAAK,CAAC,IAAI,CAAE,IAAI,CAAE,CAAC;KACxB;;;;;;IAOM,iDAAS,GAAhB;QACC,OAAO,IAAI,CAAC,MAAM,CAAC;KACnB;;;;;;IAOM,iDAAS,GAAhB;QACC,OAAO,IAAI,CAAC,aAAa,CAAC;KAC1B;;;;;;IAOM,gDAAQ,GAAf;QACC,OAAO,IAAI,CAAC,YAAY,CAAC;KACzB;;;;;;IAOM,gDAAQ,GAAf;QACC,OAAO,IAAI,CAAC,YAAY,CAAC;KACzB;;;;;;IAOM,4CAAI,GAAX;QAAA,iBAmCC;QAlCA,OAAO,IAAI,OAAO,CAAa,UAAE,OAAmB,EAAE,MAAkB;;YAGvE,IAAK,KAAI,CAAC,MAAM,CAAC,UAAU,CAAC,OAAO,IAAI,KAAI,CAAC,MAAM,CAAC,UAAU,CAAC,IAAI,CAAC,KAAK,GAAG,CAAC,EAAG;;gBAG9E,IAAM,aAAa,GAA0B,KAAI,CAAC,gBAAgB,CAAC,gBAAgB,CAAE,MAAM,EAAE,KAAI,CAAC,YAAY,CAAE,CAAC;;gBAGjH,IAAM,kBAAkB,GAAkB,MAAM,CAAC,IAAI,CAAE,aAAa,CAAC,SAAS,CAAE,CAAC,CAAE,CAAE,CAAC;gBACtF,KAAM,IAAI,CAAC,GAAW,kBAAkB,CAAC,MAAM,GAAG,CAAC,EAAE,CAAC,IAAI,CAAC,EAAE,CAAC,EAAE,EAAG;oBAClE,KAAI,CAAC,QAAQ,CAAC,QAAQ,CAAE,KAAI,CAAC,OAAO,EAAE,kBAAkB,CAAE,CAAC,CAAE,EAC5D,aAAa,CAAC,SAAS,CAAE,CAAC,CAAE,CAAE,kBAAkB,CAAE,CAAC,CAAE,CAAE,CAAE,CAAC;iBAC3D;;gBAGD,KAAI,CAAC,QAAQ,CAAC,QAAQ,CAAE,KAAI,CAAC,OAAO,EAAE,YAAY,EAAE,SAAS,CAAE,CAAC;gBAChE,IAAM,SAAS,GAAc,KAAI,CAAC,OAAO,CAAC,OAAO,CAAE,aAAa,CAAC,SAAS,EAAE,aAAa,CAAC,OAAO,CAAE,CAAC;gBACpG,SAAS,CAAC,QAAQ,GAAG;oBACpB,KAAI,CAAC,kBAAkB,EAAE,CAAC;oBAC1B,OAAO,EAAE,CAAC;iBACV,CAAC;aAEF;iBAAM;;gBAGN,KAAI,CAAC,QAAQ,CAAC,QAAQ,CAAE,KAAI,CAAC,OAAO,EAAE,YAAY,EAAE,SAAS,CAAE,CAAC;gBAChE,KAAI,CAAC,kBAAkB,EAAE,CAAC;gBAC1B,OAAO,EAAE,CAAC;aAEV;SAED,CAAE,CAAC;KAEJ;;;;;;IAOM,4CAAI,GAAX;QAAA,iBAiBC;QAhBA,OAAO,IAAI,OAAO,CAAa,UAAE,OAAmB,EAAE,MAAkB;YAEvE,KAAI,CAAC,iBAAiB,EAAE,CAAC;;YAGzB,IAAK,KAAI,CAAC,MAAM,CAAC,UAAU,CAAC,OAAO,IAAI,KAAI,CAAC,MAAM,CAAC,UAAU,CAAC,IAAI,CAAC,KAAK,GAAG,CAAC,EAAG;gBAC9E,IAAM,aAAa,GAA0B,KAAI,CAAC,gBAAgB,CAAC,gBAAgB,CAAE,MAAM,EAAE,KAAI,CAAC,YAAY,CAAE,CAAC;gBACjH,IAAM,SAAS,GAAc,KAAI,CAAC,OAAO,CAAC,OAAO,CAAE,aAAa,CAAC,SAAS,EAAE,aAAa,CAAC,OAAO,CAAE,CAAC;gBACpG,SAAS,CAAC,QAAQ,GAAG;oBACpB,OAAO,EAAE,CAAC;iBACV,CAAC;aACF;iBAAM;gBACN,OAAO,EAAE,CAAC;aACV;SAED,CAAE,CAAC;KACJ;;;;;;;;IASM,6CAAK,GAAZ,UAAc,QAAgB,EAAE,gBAAyB;QAAzD,iBA4CC;QA3CA,OAAO,IAAI,OAAO,CAAa,UAAE,OAAmB,EAAE,MAAkB;;YAGvE,IAAI,eAAuB,CAAC;YAC5B,IAAK,CAAE,KAAI,CAAC,MAAM,CAAC,QAAQ,CAAC,QAAQ,CAAC,QAAQ,KAAK,KAAK,IAAI,gBAAgB;oBACrE,KAAI,CAAC,MAAM,CAAC,QAAQ,CAAC,QAAQ,CAAC,QAAQ,KAAK,QAAQ,IAAI,CAAC,gBAAgB,CAAE,EAAG;gBAClF,eAAe,GAAG,KAAI,CAAC,YAAY,GAAG,QAAQ,GAAG,KAAI,CAAC,MAAM,CAAC,QAAQ,CAAC,QAAQ,CAAC,GAAG,CAAC;aACnF;iBAAM;gBACN,eAAe,GAAG,KAAI,CAAC,YAAY,GAAG,QAAQ,GAAG,KAAI,CAAC,MAAM,CAAC,QAAQ,CAAC,QAAQ,CAAC,GAAG,CAAC;aACnF;YACD,IAAM,kBAAkB,GAAW,KAAI,CAAC,MAAM,CAAC,QAAQ,CAAC,UAAU,CAAC,QAAQ,KAAK,QAAQ,GAAG,MAAM,GAAG,GAAG,CAAC;;YAGxG,IAAK,KAAI,CAAC,MAAM,CAAC,UAAU,CAAC,OAAO,IAAI,KAAI,CAAC,MAAM,CAAC,UAAU,CAAC,KAAK,CAAC,KAAK,GAAG,CAAC,EAAG;gBAC/E,IAAM,aAAa,GAA0B;oBAC5C,SAAS,EAAE;wBACV;4BACC,SAAS,EAAE,kBAAiB,kBAAkB,UAAO,KAAI,CAAC,YAAY,YAAU;yBAChF;wBACD;4BACC,SAAS,EAAE,kBAAiB,kBAAkB,UAAO,eAAe,YAAU;yBAC9E;qBACD;oBACD,OAAO,EAAE;wBACR,QAAQ,EAAE,KAAI,CAAC,MAAM,CAAC,UAAU,CAAC,KAAK,CAAC,KAAK;wBAC5C,MAAM,EAAE,KAAI,CAAC,MAAM,CAAC,UAAU,CAAC,KAAK,CAAC,MAAM;wBAC3C,IAAI,EAAE,UAAU;qBAChB;iBACD,CAAC;gBACF,KAAI,CAAC,YAAY,GAAG,eAAe,CAAC;gBACpC,IAAM,SAAS,GAAc,KAAI,CAAC,OAAO,CAAC,OAAO,CAAE,aAAa,CAAC,SAAS,EAAE,aAAa,CAAC,OAAO,CAAE,CAAC;gBACpG,SAAS,CAAC,QAAQ,GAAG;oBACpB,OAAO,EAAE,CAAC;iBACV,CAAC;aAEF;iBAAM;gBACN,KAAI,CAAC,QAAQ,CAAC,QAAQ,CAAE,KAAI,CAAC,OAAO,EAAE,WAAW,EAAE,kBAAiB,kBAAkB,UAAO,eAAe,YAAU,CAAE,CAAC;gBACzH,KAAI,CAAC,YAAY,GAAG,eAAe,CAAC;gBACpC,OAAO,EAAE,CAAC;aACV;SAED,CAAE,CAAC;KAEJ;;;;IAKM,sDAAc,GAArB;QACC,IAAI,CAAC,OAAO,CAAC,IAAI,CAAE,IAAI,CAAC,YAAY,CAAC,EAAE,CAAE,CAAC;KAC1C;;;;IAKM,+DAAuB,GAA9B;QACC,IAAK,IAAI,CAAC,MAAM,CAAC,SAAS,CAAC,WAAW,KAAK,eAAe,EAAG;YAC5D,IAAI,CAAC,kBAAkB,EAAE,CAAC;SAC1B;aAAM,IAAK,IAAI,CAAC,MAAM,CAAC,SAAS,CAAC,WAAW,KAAK,eAAe,EAAG;YACnE,IAAI,CAAC,iBAAiB,EAAE,CAAC;SACzB;KACD;;;;IAKM,8DAAsB,GAA7B;QACC,IAAK,IAAI,CAAC,MAAM,CAAC,SAAS,CAAC,WAAW,KAAK,eAAe,EAAG;YAC5D,IAAI,CAAC,qBAAqB,EAAE,CAAC;SAC7B;aAAM,IAAK,IAAI,CAAC,MAAM,CAAC,SAAS,CAAC,WAAW,KAAK,eAAe,EAAG;YACnE,IAAI,CAAC,kBAAkB,EAAE,CAAC;SAC1B;KACD;;;;IAKM,2DAAmB,GAA1B;QACC,IAAK,IAAI,CAAC,MAAM,CAAC,SAAS,CAAC,OAAO,KAAK,MAAM,EAAG;YAC/C,IAAI,CAAC,cAAc,EAAE,CAAC;SACtB;KACD;;;;IAKO,0DAAkB,GAA1B;QAAA,iBAMC;QALA,IAAK,IAAI,CAAC,MAAM,CAAC,SAAS,CAAC,QAAQ,KAAK,KAAK,IAAI,IAAI,CAAC,MAAM,CAAC,SAAS,CAAC,QAAQ,GAAG,CAAC,EAAG;YACrF,IAAI,CAAC,YAAY,CAAC,KAAK,CAAE,IAAI,CAAC,MAAM,CAAC,SAAS,CAAC,QAAQ,CAAE,CAAC,IAAI,CAAE;gBAC/D,KAAI,CAAC,cAAc,EAAE,CAAC;aACtB,CAAE,CAAC;SACJ;KACD;;;;IAKO,0DAAkB,GAA1B;QACC,IAAK,IAAI,CAAC,MAAM,CAAC,SAAS,CAAC,QAAQ,KAAK,KAAK,IAAI,IAAI,CAAC,MAAM,CAAC,SAAS,CAAC,QAAQ,GAAG,CAAC,EAAG;YACrF,IAAI,CAAC,YAAY,CAAC,KAAK,EAAE,CAAC;SAC1B;KACD;;;;IAKO,6DAAqB,GAA7B;QACC,IAAK,IAAI,CAAC,MAAM,CAAC,SAAS,CAAC,QAAQ,KAAK,KAAK,IAAI,IAAI,CAAC,MAAM,CAAC,SAAS,CAAC,QAAQ,GAAG,CAAC,EAAG;YACrF,IAAI,CAAC,YAAY,CAAC,QAAQ,EAAE,CAAC;SAC7B;KACD;;;;IAKO,yDAAiB,GAAzB;QACC,IAAK,IAAI,CAAC,MAAM,CAAC,SAAS,CAAC,QAAQ,KAAK,KAAK,IAAI,IAAI,CAAC,MAAM,CAAC,SAAS,CAAC,QAAQ,GAAG,CAAC,EAAG;YACrF,IAAI,CAAC,YAAY,CAAC,IAAI,EAAE,CAAC;SACzB;KACD;;;;IAKO,6CAAK,GAAb;;QAGC,IAAK,IAAI,CAAC,MAAM,CAAC,QAAQ,CAAC,UAAU,CAAC,QAAQ,KAAK,MAAM,EAAG;YAC1D,IAAI,CAAC,QAAQ,CAAC,QAAQ,CAAE,IAAI,CAAC,OAAO,EAAE,MAAM,EAAM,IAAI,CAAC,MAAM,CAAC,QAAQ,CAAC,UAAU,CAAC,QAAQ,OAAK,CAAE,CAAC;SAClG;aAAM,IAAK,IAAI,CAAC,MAAM,CAAC,QAAQ,CAAC,UAAU,CAAC,QAAQ,KAAK,OAAO,EAAG;YAClE,IAAI,CAAC,QAAQ,CAAC,QAAQ,CAAE,IAAI,CAAC,OAAO,EAAE,OAAO,EAAM,IAAI,CAAC,MAAM,CAAC,QAAQ,CAAC,UAAU,CAAC,QAAQ,OAAK,CAAE,CAAC;SACnG;aAAM;YACN,IAAI,CAAC,QAAQ,CAAC,QAAQ,CAAE,IAAI,CAAC,OAAO,EAAE,MAAM,EAAE,KAAK,CAAE,CAAC;;YAEtD,IAAI,CAAC,QAAQ,CAAC,QAAQ,CAAE,IAAI,CAAC,OAAO,EAAE,WAAW,EAAE,2BAA2B,CAAE,CAAC;SACjF;QACD,IAAK,IAAI,CAAC,MAAM,CAAC,QAAQ,CAAC,QAAQ,CAAC,QAAQ,KAAK,KAAK,EAAG;YACvD,IAAI,CAAC,QAAQ,CAAC,QAAQ,CAAE,IAAI,CAAC,OAAO,EAAE,KAAK,EAAM,IAAI,CAAC,MAAM,CAAC,QAAQ,CAAC,QAAQ,CAAC,QAAQ,OAAK,CAAE,CAAC;SAC/F;aAAM;YACN,IAAI,CAAC,QAAQ,CAAC,QAAQ,CAAE,IAAI,CAAC,OAAO,EAAE,QAAQ,EAAM,IAAI,CAAC,MAAM,CAAC,QAAQ,CAAC,QAAQ,CAAC,QAAQ,OAAK,CAAE,CAAC;SAClG;;QAGD,IAAI,CAAC,QAAQ,CAAC,QAAQ,CAAE,IAAI,CAAC,OAAO,EAAE,6BAA4B,IAAI,CAAC,YAAY,CAAC,IAAO,CAAE,CAAC;QAC9F,IAAI,CAAC,QAAQ,CAAC,QAAQ,CAAE,IAAI,CAAC,OAAO,EAAE,6BAA4B,IAAI,CAAC,MAAM,CAAC,KAAQ,CAAE,CAAC;KAEzF;iIA3VW,6BAA6B;sFAA7B,6BAA6B;2GAA7B,yBAAqB,+FAArB,4BAAwB,iGAAxB,6BAAyB;sIAR1B;;;gBAGV,oBAAoB;aACpB;YD7BFO,6FACA;YAEAA,yHACC;;;YAJaP,6CAA0D,iBAAA;;wCCAxE;CAiBA,IA6WC;+CA7VY,6BAA6B;cAhBzC,SAAS;eAAE;gBACX,eAAe,EAAE,uBAAuB,CAAC,MAAM;gBAC/C,IAAI,EAAE;oBACL,SAAS,EAAE,uBAAuB;oBAClC,YAAY,EAAE,0BAA0B;oBACxC,aAAa,EAAE,2BAA2B;oBAC1C,KAAK,EAAE,wBAAwB;iBAC/B;gBACD,SAAS,EAAE;;;oBAGV,oBAAoB;iBACpB;gBACD,QAAQ,EAAE,uBAAuB;gBACjC,WAAW,EAAE,wCAAwC;aACrD;;kBAMC,KAAK;;kBAML,MAAM;;kBAMN,MAAM;;;;;ICjDPC,0BACC;IAAAA,6CAIwB;IAFvBC,sNAAuC,kNAAA;IAExCG,cAAwB;IACzBA,cAAK;;;IAJHG,YAA6B;IAA7BR,2CAA6B;;ACQhC;;;;;;;;;;;;;;;;;;;;;IA4DC,oCAAoB,cAAiC,EAAE,oBAA0C,EAAE,eAAgC;QAAnI,iBAaC;QAZA,IAAI,CAAC,cAAc,GAAG,cAAc,CAAC;QACrC,IAAI,CAAC,YAAY,GAAG,oBAAoB,CAAC;QACzC,IAAI,CAAC,MAAM,GAAG,eAAe,CAAC,SAAS,EAAE,CAAC;QAC1C,IAAI,CAAC,aAAa,GAAG,EAAE,CAAC;;QAGxB,IAAI,CAAC,wBAAwB,GAAG,IAAI,CAAC,YAAY,CAAC,YAAY,CAAC,SAAS,CAAE,UAAE,MAAsB;YACjG,KAAI,CAAC,YAAY,CAAE,MAAM,CAAE,CAAC,IAAI,CAAE;gBACjC,KAAI,CAAC,YAAY,CAAC,QAAQ,EAAE,CAAC;aAC7B,CAAE,CAAC;SACJ,CAAE,CAAC;KAEJ;;;;IAKM,gDAAW,GAAlB;QACC,IAAK,IAAI,CAAC,wBAAwB,EAAG;YACpC,IAAI,CAAC,wBAAwB,CAAC,WAAW,EAAE,CAAC;SAC5C;KACD;;;;;;;;IASM,yDAAoB,GAA3B,UAA6B,KAAa,EAAE,YAAkC;QAC7E,OAAO,YAAY,CAAC,EAAE,CAAC;KACvB;;;;;;IAOM,0DAAqB,GAA5B,UAA8B,cAAsB;QACnD,IAAI,CAAC,YAAY,CAAC,IAAI,CAAE;YACvB,OAAO,EAAE,cAAc;YACvB,IAAI,EAAE,MAAM;SACZ,CAAE,CAAC;KACJ;;;;;;IAOM,wDAAmB,GAA1B,UAA4B,qBAAoD;QAC/E,IAAI,mBAAmB,GAAyB,IAAI,CAAC,aAAa,CAAE,IAAI,CAAC,aAAa,CAAC,MAAM,GAAG,CAAC,CAAE,CAAC;QACpG,mBAAmB,CAAC,SAAS,GAAG,qBAAqB,CAAC;QACtD,IAAI,CAAC,wBAAwB,CAAE,mBAAmB,CAAE,CAAC;KACrD;;;;;;;IAQO,iDAAY,GAApB,UAAsB,MAAsB;QAC3C,QAAS,MAAM,CAAC,IAAI;YACnB,KAAK,MAAM;gBACV,OAAO,IAAI,CAAC,gBAAgB,CAAE,MAAM,CAAE,CAAC;YACxC,KAAK,MAAM;gBACV,OAAO,IAAI,CAAC,gBAAgB,CAAE,MAAM,CAAE,CAAC;YACxC,KAAK,aAAa;gBACjB,OAAO,IAAI,CAAC,sBAAsB,CAAE,MAAM,CAAE,CAAC;YAC9C,KAAK,aAAa;gBACjB,OAAO,IAAI,CAAC,sBAAsB,CAAE,MAAM,CAAE,CAAC;YAC9C,KAAK,UAAU;gBACd,OAAO,IAAI,CAAC,mBAAmB,CAAE,MAAM,CAAE,CAAC;YAC3C;gBACC,OAAO,IAAI,OAAO,CAAa,UAAE,OAAmB,EAAE,MAAkB;oBACvE,OAAO,EAAE,CAAC;iBACV,CAAE,CAAC;SACL;KACD;;;;;;;;;IAUO,qDAAgB,GAAxB,UAA0B,MAAsB;QAAhD,iBAKC;QAJA,OAAO,IAAI,OAAO,CAAa,UAAE,OAAmB,EAAE,MAAkB;YACvE,KAAI,CAAC,mBAAmB,GAAG,OAAO,CAAC;YACnC,KAAI,CAAC,qBAAqB,CAAE,IAAI,oBAAoB,CAAE,MAAM,CAAC,OAAO,CAAE,CAAE,CAAC;SACzE,CAAE,CAAC;KACJ;;;;;;;;;;;IAYO,6DAAwB,GAAhC,UAAkC,YAAkC;QAApE,iBA4FC;;QAzFA,IAAM,qBAAqB,GAAW,IAAI,CAAC,aAAa,CAAC,MAAM,CAAC;QAChE,IAAK,qBAAqB,KAAK,CAAC,EAAG;YAClC,YAAY,CAAC,SAAS,CAAC,IAAI,EAAE,CAAC,IAAI,CAAE,IAAI,CAAC,mBAAmB,CAAE,CAAC;SAC/D;aAAM;YAEN,IAAM,qBAAqB,GAAW,CAAC,CAAC;;YAGxC,IAAK,IAAI,CAAC,MAAM,CAAC,SAAS,CAAC,QAAQ,KAAK,KAAK,IAAI,IAAI,CAAC,MAAM,CAAC,SAAS,CAAC,QAAQ,GAAG,qBAAqB,EAAG;gBACzG,IAAI,CAAC,aAAa,CAAE,CAAC,CAAE,CAAC,SAAS,CAAC,IAAI,EAAE,CAAC,IAAI,CAAE;oBAC9C,KAAI,CAAC,0BAA0B,CAAE,KAAI,CAAC,aAAa,CAAE,CAAC,CAAE,CAAE,CAAC;oBAC3D,YAAY,CAAC,SAAS,CAAC,IAAI,EAAE,CAAC,IAAI,CAAE,KAAI,CAAC,mBAAmB,CAAE,CAAC;iBAC/D,CAAE,CAAC;aACJ;iBAAM;gBAEN,IAAM,cAAY,GAA8B,EAAE,CAAC;;gBAGnD,IAAK,qBAAqB,GAAG,IAAI,CAAC,MAAM,CAAC,SAAS,CAAC,QAAQ,EAAG;oBAE7D,IAAM,kBAAgB,GAAgC,IAAI,CAAC,aAAa,CAAC,KAAK,CAAE,CAAC,EAAE,qBAAqB,GAAG,CAAC,CAAE,CAAC;;oBAG/G,IAAK,IAAI,CAAC,MAAM,CAAC,UAAU,CAAC,OAAO,EAAG;;wBAGrC,IAAK,IAAI,CAAC,MAAM,CAAC,UAAU,CAAC,OAAO,KAAK,KAAK,IAAI,IAAI,CAAC,MAAM,CAAC,UAAU,CAAC,OAAO,GAAG,CAAC,EAAG;4BACrF,cAAY,CAAC,IAAI,CAAE,IAAI,CAAC,aAAa,CAAE,CAAC,CAAE,CAAC,SAAS,CAAC,IAAI,EAAE,CAAE,CAAC;4BAC9D,UAAU,CAAE;gCACX,cAAY,CAAC,IAAI,CAAE,KAAI,CAAC,kBAAkB,CAAE,kBAAgB,EAAE,YAAY,CAAC,SAAS,CAAC,SAAS,EAAE,EAAE,IAAI,CAAE,CAAE,CAAC;6BAC3G,EAAE,IAAI,CAAC,MAAM,CAAC,UAAU,CAAC,IAAI,CAAC,KAAK,GAAG,IAAI,CAAC,MAAM,CAAC,UAAU,CAAC,OAAO,CAAE,CAAC;4BACxE,UAAU,CAAE;gCACX,cAAY,CAAC,IAAI,CAAE,YAAY,CAAC,SAAS,CAAC,IAAI,EAAE,CAAE,CAAC;6BACnD,EAAE,IAAI,CAAC,MAAM,CAAC,UAAU,CAAC,IAAI,CAAC,KAAK,GAAG,IAAI,CAAC,MAAM,CAAC,UAAU,CAAC,KAAK,CAAC,KAAK,GAAG,IAAI,CAAC,MAAM,CAAC,UAAU,CAAC,OAAO,CAAE,CAAC;yBAC7G;6BAAM;4BACN,cAAY,CAAC,IAAI,CAAE,IAAI,OAAO,CAAa,UAAE,OAAmB,EAAE,MAAkB;gCACnF,KAAI,CAAC,aAAa,CAAE,CAAC,CAAE,CAAC,SAAS,CAAC,IAAI,EAAE,CAAC,IAAI,CAAE;oCAC9C,KAAI,CAAC,kBAAkB,CAAE,kBAAgB,EAAE,YAAY,CAAC,SAAS,CAAC,SAAS,EAAE,EAAE,IAAI,CAAE,CAAC,IAAI,CAAE;wCAC3F,YAAY,CAAC,SAAS,CAAC,IAAI,EAAE,CAAC,IAAI,CAAE,OAAO,CAAE,CAAC;qCAC9C,CAAE,CAAC;iCACJ,CAAE,CAAC;6BACJ,CAAE,CAAE,CAAC;yBACN;qBAED;yBAAM;wBACN,cAAY,CAAC,IAAI,CAAE,IAAI,CAAC,aAAa,CAAE,CAAC,CAAE,CAAC,SAAS,CAAC,IAAI,EAAE,CAAE,CAAC;wBAC9D,cAAY,CAAC,IAAI,CAAE,IAAI,CAAC,kBAAkB,CAAE,kBAAgB,EAAE,YAAY,CAAC,SAAS,CAAC,SAAS,EAAE,EAAE,IAAI,CAAE,CAAE,CAAC;wBAC3G,cAAY,CAAC,IAAI,CAAE,YAAY,CAAC,SAAS,CAAC,IAAI,EAAE,CAAE,CAAC;qBACnD;iBAED;qBAAM;oBAEN,IAAM,kBAAgB,GAAgC,IAAI,CAAC,aAAa,CAAC,KAAK,CAAE,CAAC,EAAE,qBAAqB,GAAG,CAAC,CAAE,CAAC;;oBAG/G,IAAK,IAAI,CAAC,MAAM,CAAC,UAAU,CAAC,OAAO,EAAG;;wBAGrC,IAAK,IAAI,CAAC,MAAM,CAAC,UAAU,CAAC,OAAO,KAAK,KAAK,IAAI,IAAI,CAAC,MAAM,CAAC,UAAU,CAAC,OAAO,GAAG,CAAC,EAAG;4BACrF,cAAY,CAAC,IAAI,CAAE,IAAI,CAAC,kBAAkB,CAAE,kBAAgB,EAAE,YAAY,CAAC,SAAS,CAAC,SAAS,EAAE,EAAE,IAAI,CAAE,CAAE,CAAC;4BAC3G,UAAU,CAAE;gCACX,cAAY,CAAC,IAAI,CAAE,YAAY,CAAC,SAAS,CAAC,IAAI,EAAE,CAAE,CAAC;6BACnD,EAAE,IAAI,CAAC,MAAM,CAAC,UAAU,CAAC,KAAK,CAAC,KAAK,GAAG,IAAI,CAAC,MAAM,CAAC,UAAU,CAAC,OAAO,CAAE,CAAC;yBACzE;6BAAM;4BACN,cAAY,CAAC,IAAI,CAAE,IAAI,OAAO,CAAa,UAAE,OAAmB,EAAE,MAAkB;gCACnF,KAAI,CAAC,kBAAkB,CAAE,kBAAgB,EAAE,YAAY,CAAC,SAAS,CAAC,SAAS,EAAE,EAAE,IAAI,CAAE,CAAC,IAAI,CAAE;oCAC3F,YAAY,CAAC,SAAS,CAAC,IAAI,EAAE,CAAC,IAAI,CAAE,OAAO,CAAE,CAAC;iCAC9C,CAAE,CAAC;6BACJ,CAAE,CAAE,CAAC;yBACN;qBAED;yBAAM;wBACN,cAAY,CAAC,IAAI,CAAE,IAAI,CAAC,kBAAkB,CAAE,kBAAgB,EAAE,YAAY,CAAC,SAAS,CAAC,SAAS,EAAE,EAAE,IAAI,CAAE,CAAE,CAAC;wBAC3G,cAAY,CAAC,IAAI,CAAE,YAAY,CAAC,SAAS,CAAC,IAAI,EAAE,CAAE,CAAC;qBACnD;iBAED;gBAED,OAAO,CAAC,GAAG,CAAE,cAAY,CAAE,CAAC,IAAI,CAAE;oBACjC,IAAK,qBAAqB,GAAG,KAAI,CAAC,MAAM,CAAC,SAAS,CAAC,QAAQ,EAAG;wBAC7D,KAAI,CAAC,0BAA0B,CAAE,KAAI,CAAC,aAAa,CAAE,CAAC,CAAE,CAAE,CAAC;qBAC3D;oBACD,KAAI,CAAC,mBAAmB,EAAE,CAAC;iBAC3B,CAAE,CAAC;aAEJ;SAED;KAED;;;;;;;;;;;IAYO,qDAAgB,GAAxB,UAA0B,MAAsB;QAAhD,iBAwDC;QAvDA,OAAO,IAAI,OAAO,CAAa,UAAE,OAAmB,EAAE,MAAkB;YAEvE,IAAM,YAAY,GAA8B,EAAE,CAAC;;YAGnD,IAAM,YAAY,GAAqC,KAAI,CAAC,oBAAoB,CAAE,MAAM,CAAC,OAAO,CAAE,CAAC;YACnG,IAAK,YAAY,KAAK,SAAS,EAAG;gBACjC,OAAO,EAAE,CAAC;gBACV,OAAO;aACP;;YAGD,IAAM,iBAAiB,GAAuB,KAAI,CAAC,yBAAyB,CAAE,MAAM,CAAC,OAAO,CAAE,CAAC;YAC/F,IAAK,iBAAiB,KAAK,SAAS,EAAG;gBACtC,OAAO,EAAE,CAAC;gBACV,OAAO;aACP;YACD,IAAM,gBAAgB,GAAgC,KAAI,CAAC,aAAa,CAAC,KAAK,CAAE,CAAC,EAAE,iBAAiB,CAAE,CAAC;;YAGvG,IAAK,gBAAgB,CAAC,MAAM,GAAG,CAAC,EAAG;;gBAGlC,IAAK,KAAI,CAAC,MAAM,CAAC,UAAU,CAAC,OAAO,IAAI,KAAI,CAAC,MAAM,CAAC,UAAU,CAAC,IAAI,CAAC,KAAK,GAAG,CAAC,EAAG;;oBAG9E,IAAK,KAAI,CAAC,MAAM,CAAC,UAAU,CAAC,OAAO,KAAK,KAAK,IAAI,KAAI,CAAC,MAAM,CAAC,UAAU,CAAC,OAAO,GAAG,CAAC,EAAG;wBACrF,YAAY,CAAC,IAAI,CAAE,YAAY,CAAC,SAAS,CAAC,IAAI,EAAE,CAAE,CAAC;wBACnD,UAAU,CAAE;4BACX,YAAY,CAAC,IAAI,CAAE,KAAI,CAAC,kBAAkB,CAAE,gBAAgB,EAAE,YAAY,CAAC,SAAS,CAAC,SAAS,EAAE,EAAE,KAAK,CAAE,CAAE,CAAC;yBAC5G,EAAE,KAAI,CAAC,MAAM,CAAC,UAAU,CAAC,IAAI,CAAC,KAAK,GAAG,KAAI,CAAC,MAAM,CAAC,UAAU,CAAC,OAAO,CAAE,CAAC;qBACxE;yBAAM;wBACN,YAAY,CAAC,SAAS,CAAC,IAAI,EAAE,CAAC,IAAI,CAAE;4BACnC,YAAY,CAAC,IAAI,CAAE,KAAI,CAAC,kBAAkB,CAAE,gBAAgB,EAAE,YAAY,CAAC,SAAS,CAAC,SAAS,EAAE,EAAE,KAAK,CAAE,CAAE,CAAC;yBAC5G,CAAE,CAAC;qBACJ;iBACD;qBAAM;oBACN,YAAY,CAAC,IAAI,CAAE,YAAY,CAAC,SAAS,CAAC,IAAI,EAAE,CAAE,CAAC;oBACnD,YAAY,CAAC,IAAI,CAAE,KAAI,CAAC,kBAAkB,CAAE,gBAAgB,EAAE,YAAY,CAAC,SAAS,CAAC,SAAS,EAAE,EAAE,KAAK,CAAE,CAAE,CAAC;iBAC5G;aAED;iBAAM;gBAEN,YAAY,CAAC,IAAI,CAAE,YAAY,CAAC,SAAS,CAAC,IAAI,EAAE,CAAE,CAAC;aAEnD;;YAGD,OAAO,CAAC,GAAG,CAAE,YAAY,CAAE,CAAC,IAAI,CAAE;gBACjC,KAAI,CAAC,0BAA0B,CAAE,YAAY,CAAE,CAAC;gBAChD,OAAO,EAAE,CAAC;aACV,CAAE,CAAC;SAEJ,CAAE,CAAC;KAEJ;;;;;;;IAQO,2DAAsB,GAA9B,UAAgC,MAAsB;;QAGrD,IAAK,IAAI,CAAC,aAAa,CAAC,MAAM,KAAK,CAAC,EAAG;YACtC,OAAO,IAAI,OAAO,CAAa,UAAE,OAAmB,EAAE,MAAkB;gBACvE,OAAO,EAAE,CAAC;aACV,CAAE,CAAC;SACJ;aAAM;YACN,MAAM,CAAC,OAAO,GAAG,IAAI,CAAC,aAAa,CAAE,CAAC,CAAE,CAAC,EAAE,CAAC;YAC5C,OAAO,IAAI,CAAC,gBAAgB,CAAE,MAAM,CAAE,CAAC;SACvC;KAED;;;;;;;IAQO,2DAAsB,GAA9B,UAAgC,MAAsB;;QAGrD,IAAK,IAAI,CAAC,aAAa,CAAC,MAAM,KAAK,CAAC,EAAG;YACtC,OAAO,IAAI,OAAO,CAAa,UAAE,OAAmB,EAAE,MAAkB;gBACvE,OAAO,EAAE,CAAC;aACV,CAAE,CAAC;SACJ;aAAM;YACN,MAAM,CAAC,OAAO,GAAG,IAAI,CAAC,aAAa,CAAE,IAAI,CAAC,aAAa,CAAC,MAAM,GAAG,CAAC,CAAE,CAAC,EAAE,CAAC;YACxE,OAAO,IAAI,CAAC,gBAAgB,CAAE,MAAM,CAAE,CAAC;SACvC;KAED;;;;;;;IAQO,wDAAmB,GAA3B,UAA6B,MAAsB;QAAnD,iBA4CC;QA3CA,OAAO,IAAI,OAAO,CAAa,UAAE,OAAmB,EAAE,MAAkB;;YAGvE,IAAM,qBAAqB,GAAW,KAAI,CAAC,aAAa,CAAC,MAAM,CAAC;YAChE,IAAK,qBAAqB,KAAK,CAAC,EAAG;gBAClC,OAAO,EAAE,CAAC;gBACV,OAAO;aACP;;YAGD,IAAK,KAAI,CAAC,MAAM,CAAC,UAAU,CAAC,OAAO,IAAI,KAAI,CAAC,MAAM,CAAC,UAAU,CAAC,IAAI,CAAC,KAAK,GAAG,CAAC,IAAI,KAAI,CAAC,MAAM,CAAC,UAAU,CAAC,IAAI,CAAC,MAAM,KAAK,KAAK;gBAC3H,KAAI,CAAC,MAAM,CAAC,UAAU,CAAC,IAAI,CAAC,MAAM,GAAG,CAAC,EAAG;wCAE/B,CAAC;oBACV,IAAM,eAAe,GAAW,KAAI,CAAC,MAAM,CAAC,QAAQ,CAAC,QAAQ,CAAC,QAAQ,KAAK,KAAK,GAAG,qBAAqB,GAAG,CAAC,GAAG,CAAC,CAAC;oBACjH,UAAU,CAAE;wBACX,KAAI,CAAC,aAAa,CAAE,CAAC,CAAE,CAAC,SAAS,CAAC,IAAI,EAAE,CAAC,IAAI,CAAE;;4BAG9C,IAAK,CAAE,KAAI,CAAC,MAAM,CAAC,QAAQ,CAAC,QAAQ,CAAC,QAAQ,KAAK,KAAK,IAAI,CAAC,KAAK,CAAC;iCAC/D,KAAI,CAAC,MAAM,CAAC,QAAQ,CAAC,QAAQ,CAAC,QAAQ,KAAK,QAAQ,IAAI,CAAC,KAAK,qBAAqB,GAAG,CAAC,CAAE,EAAG;gCAC7F,KAAI,CAAC,8BAA8B,EAAE,CAAC;gCACtC,OAAO,EAAE,CAAC;6BACV;yBAED,CAAE,CAAC;qBACJ,EAAE,KAAI,CAAC,MAAM,CAAC,UAAU,CAAC,IAAI,CAAC,MAAM,GAAG,eAAe,CAAE,CAAC;;gBAb3D,KAAM,IAAI,CAAC,GAAW,qBAAqB,GAAG,CAAC,EAAE,CAAC,IAAI,CAAC,EAAE,CAAC,EAAE;4BAAlD,CAAC;iBAcV;aAED;iBAAM;gBAEN,IAAI,YAAY,GAA8B,EAAE,CAAC;gBACjD,KAAM,IAAI,CAAC,GAAW,qBAAqB,GAAG,CAAC,EAAE,CAAC,IAAI,CAAC,EAAE,CAAC,EAAE,EAAG;oBAC9D,YAAY,CAAC,IAAI,CAAE,KAAI,CAAC,aAAa,CAAE,CAAC,CAAE,CAAC,SAAS,CAAC,IAAI,EAAE,CAAE,CAAC;iBAC9D;gBACD,OAAO,CAAC,GAAG,CAAE,YAAY,CAAE,CAAC,IAAI,CAAE;oBACjC,KAAI,CAAC,8BAA8B,EAAE,CAAC;oBACtC,OAAO,EAAE,CAAC;iBACV,CAAE,CAAC;aAEJ;SAED,CAAE,CAAC;KACJ;;;;;;;;;IAUO,uDAAkB,GAA1B,UAA4B,aAA0C,EAAE,QAAgB,EAAE,WAAoB;QAC7G,OAAO,IAAI,OAAO,CAAa,UAAE,OAAmB,EAAE,MAAkB;;YAGvE,IAAK,aAAa,CAAC,MAAM,KAAK,CAAC,EAAG;gBACjC,OAAO,EAAE,CAAC;gBACV,OAAO;aACP;YAED,IAAI,oBAAoB,GAA8B,EAAE,CAAC;YACzD,KAAM,IAAI,CAAC,GAAW,aAAa,CAAC,MAAM,GAAG,CAAC,EAAE,CAAC,IAAI,CAAC,EAAE,CAAC,EAAE,EAAG;gBAC7D,oBAAoB,CAAC,IAAI,CAAE,aAAa,CAAE,CAAC,CAAE,CAAC,SAAS,CAAC,KAAK,CAAE,QAAQ,EAAE,WAAW,CAAE,CAAE,CAAC;aACzF;YACD,OAAO,CAAC,GAAG,CAAE,oBAAoB,CAAE,CAAC,IAAI,CAAE,OAAO,CAAE,CAAC;SAEpD,CAAE,CAAC;KACJ;;;;;;IAOO,0DAAqB,GAA7B,UAA+B,YAAkC;QAChE,IAAI,CAAC,aAAa,CAAC,IAAI,CAAE,YAAY,CAAE,CAAC;QACxC,IAAI,CAAC,cAAc,CAAC,YAAY,EAAE,CAAC;KACnC;;;;;;IAOO,+DAA0B,GAAlC,UAAoC,YAAkC;QACrE,IAAI,CAAC,aAAa;YACjB,IAAI,CAAC,aAAa,CAAC,MAAM,CAAE,UAAE,IAA0B,IAAM,OAAA,IAAI,CAAC,SAAS,KAAK,YAAY,CAAC,SAAS,GAAA,CAAE,CAAC;QAC1G,IAAI,CAAC,cAAc,CAAC,YAAY,EAAE,CAAC;KACnC;;;;IAKO,mEAA8B,GAAtC;QACC,IAAI,CAAC,aAAa,GAAG,EAAE,CAAC;QACxB,IAAI,CAAC,cAAc,CAAC,YAAY,EAAE,CAAC;KACnC;;;;;;;IAQO,yDAAoB,GAA5B,UAA8B,cAAsB;QACnD,OAAO,IAAI,CAAC,aAAa,CAAC,IAAI,CAAE,UAAE,mBAAyC,IAAM,OAAA,mBAAmB,CAAC,EAAE,KAAK,cAAc,GAAA,CAAE,CAAC;KAC7H;;;;;;;IAQO,8DAAyB,GAAjC,UAAmC,cAAsB;QACxD,IAAM,iBAAiB,GACtB,IAAI,CAAC,aAAa,CAAC,SAAS,CAAE,UAAE,mBAAyC,IAAM,OAAA,mBAAmB,CAAC,EAAE,KAAK,cAAc,GAAA,CAAE,CAAC;QAC5H,QAAS,iBAAiB,KAAK,CAAC,CAAC,GAAG,iBAAiB,GAAG,SAAS,EAAG;KACpE;2HA5dW,0BAA0B;mFAA1B,0BAA0B;YDhCvCC,uBACC;YAAAM,sEACC;YAMFF,cAAK;;YAPiCG,YAA0E;YAA1ER,wCAA0E,0CAAA;;qCCDhH;CAwBA,IAseC;+CA9dY,0BAA0B;cARtC,SAAS;eAAE;gBACX,eAAe,EAAE,uBAAuB,CAAC,MAAM;gBAC/C,IAAI,EAAE;oBACL,KAAK,EAAE,qBAAqB;iBAC5B;gBACD,QAAQ,EAAE,oBAAoB;gBAC9B,WAAW,EAAE,qCAAqC;aAClD;;;ACpBD;;;;;;;;;SASgB,2BAA2B,CAAE,OAAwB;IACpE,OAAO,IAAI,cAAc,CAAE,OAAO,CAAE,CAAC;AACtC,CAAC;AAED;;;;;;;;SAQgB,4BAA4B;IAC3C,OAAO,IAAI,cAAc,CAAE,EAAE,CAAE,CAAC;AACjC,CAAC;AAED;;;;IAGA;KAwDC;;;;;;;IAxBc,yBAAU,GAAxB,UAA0B,OAA6B;QAA7B,wBAAA,EAAA,YAA6B;QACtD,OAAO;YACN,QAAQ,EAAE,cAAc;YACxB,SAAS,EAAE;;gBAGV;oBACC,OAAO,EAAE,oBAAoB;oBAC7B,QAAQ,EAAE,OAAO;iBACjB;;gBAGD;oBACC,IAAI,EAAE;wBACL,oBAAoB;qBACpB;oBACD,OAAO,EAAE,mBAAmB;oBAC5B,UAAU,EAAE,2BAA2B;iBACvC;aAED;SACD,CAAC;KACF;sEA9BW,cAAc;+HAAd,cAAc,mBAbf;YACV,wBAAwB;YACxB,eAAe;YACf,oBAAoB;;YAGpB;gBACC,OAAO,EAAE,mBAAmB;gBAC5B,UAAU,EAAE,4BAA4B;aACxC;SAED,YAdQ;gBACR,YAAY;aACZ;yBAjDF;CAuCA,IAwDC;qFAhCY,cAAc,mBAtBzB,0BAA0B;QAC1B,6BAA6B,aAM7B,YAAY,aAHZ,0BAA0B;+CAkBf,cAAc;cAxB1B,QAAQ;eAAE;gBACV,YAAY,EAAE;oBACb,0BAA0B;oBAC1B,6BAA6B;iBAC7B;gBACD,OAAO,EAAE;oBACR,0BAA0B;iBAC1B;gBACD,OAAO,EAAE;oBACR,YAAY;iBACZ;gBACD,SAAS,EAAE;oBACV,wBAAwB;oBACxB,eAAe;oBACf,oBAAoB;;oBAGpB;wBACC,OAAO,EAAE,mBAAmB;wBAC5B,UAAU,EAAE,4BAA4B;qBACxC;iBAED;aACD;;;AC9DD;;;;;;"}